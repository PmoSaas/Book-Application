import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, collection, addDoc, onSnapshot, doc, updateDoc, deleteDoc, setDoc, getDoc, arrayUnion, arrayRemove, query, getDocs } from 'firebase/firestore';

// Global variables for Firebase configuration and app ID (provided by the Canvas environment)
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-book-tracker-app-id';
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// --- Global Constants and Utility Functions ---

// Define league thresholds (levels needed to be in a league) and their colors
const LEAGUE_LEVEL_THRESHOLDS = [
    { level: 1, name: 'Copper League', color: '#CD7F32' }, // Bronze-like
    { level: 6, name: 'Silver League', color: '#C0C0C0' }, // Silver
    { level: 11, name: 'Gold League', color: '#FFD700' }, // Gold
    { level: 16, name: 'Diamond League', color: '#B9F2FF' }, // Light blue/cyan
    { level: 21, name: 'Platinum League', color: '#E5E4E2' }, // Platinum/light gray
];

// Common Genres for selection (still defined, but not directly exposed in AddBookForm UI)
const COMMON_GENRES = [
    'Fiction', 'Fantasy', 'Science Fiction', 'Mystery', 'Thriller',
    'Horror', 'Romance', 'Historical Fiction', 'Biography', 'Autobiography',
    'Memoir', 'Non-Fiction', 'Self-Help', 'Young Adult', 'Children\'s',
    'Poetry', 'Drama', 'Classics', 'Adventure', 'Dystopian'
];

// Function to get the league name and color based on a player's level
const getLeagueInfo = (level) => {
    for (let i = LEAGUE_LEVEL_THRESHOLDS.length - 1; i >= 0; i--) {
        if (level >= LEAGUE_LEVEL_THRESHOLDS[i].level) {
            return { name: LEAGUE_LEVEL_THRESHOLDS[i].name, color: LEAGUE_LEVEL_THRESHOLDS[i].color };
        }
    }
    return { name: 'Unranked', color: '#9CA3AF' }; // Default color for unranked
};

// Function to calculate bonus XP based on rank in the tournament
const calculateBonusXP = (rank) => {
    // 1st: 25, 2nd: 23, 3rd: 21, 4th: 19, 5th: 17, 6th: 15, 7th: 13, 8th: 11, 9th: 9, 10th: 7
    return Math.max(0, 25 - (rank - 1) * 2);
};

// --- Utility Components ---

// Modal Component
const Modal = ({ isOpen, onClose, children }) => {
    const modalRef = useRef();

    // Close modal on outside click
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (modalRef.current && !modalRef.current.contains(event.target)) {
                onClose();
            }
        };
        if (isOpen) {
            document.addEventListener('mousedown', handleClickOutside);
        }
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [isOpen, onClose]);

    // Close modal on Escape key press
    useEffect(() => {
        const handleEscapeKey = (event) => {
            if (event.key === 'Escape') {
                onClose();
            }
        };
        if (isOpen) {
            document.addEventListener('keydown', handleEscapeKey);
        }
        return () => {
            document.removeEventListener('keydown', handleEscapeKey);
        };
    }, [isOpen, onClose]);

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-50 p-4">
            <div ref={modalRef} className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-8 w-full max-w-md max-h-[90vh] overflow-y-auto transform transition-all scale-100 opacity-100">
                {children}
            </div>
        </div>
    );
};

// Share Modal Component (New)
const ShareModal = ({ isOpen, onClose, postText, postLink }) => {
    const [copyMessage, setCopyMessage] = useState('');

    const copyToClipboard = () => {
        const linkInput = document.getElementById('post-share-link');
        if (linkInput) {
            linkInput.select();
            document.execCommand('copy');
            setCopyMessage('Link copied to clipboard!');
            setTimeout(() => setCopyMessage(''), 2000);
        }
    };

    const socialMediaPlatforms = [
        { name: 'Twitter', icon: <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M22.46 6c-.77.35-1.6.58-2.46.69.88-.53 1.56-1.37 1.88-2.37-.83.49-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29 0 .34.04.67.11.98C8.28 9.09 5.07 7.3 2.94 4.5c-.37.63-.58 1.37-.58 2.19 0 1.49.75 2.81 1.91 3.56-.7-.02-1.37-.21-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21-.36.1-.74.15-1.13.15-.28 0-.55-.03-.81-.08.54 1.7 2.11 2.92 3.96 2.95C10.6 19.1 8.7 19.75 6.75 19.75c-.33 0-.66-.02-.98-.06 1.93 1.29 4.24 2.04 6.74 2.04 8.09 0 12.08-6.71 12.08-12.63 0-.2-.01-.4-.02-.6.83-.6 1.56-1.35 2.14-2.2z"/></svg>, shareUrl: `https://twitter.com/intent/tweet?text=${encodeURIComponent(postText)}&url=${encodeURIComponent(postLink)}` },
        { name: 'Facebook', icon: <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M22 12c0-5.52-4.48-10-10-10S2 6.48 2 12c0 4.84 3.44 8.87 8 9.8V15H8v-3h2V9.5C10 7.57 11.57 6 13.5 6H16v3h-2c-.55 0-1 .45-1 1v2h3v3h-3v6.95c5.05-.5 9-4.76 9-9.95z"/></svg>, shareUrl: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(postLink)}&quote=${encodeURIComponent(postText)}` },
        { name: 'LinkedIn', icon: <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M20.447 20.452h-3.554v-5.563c0-1.325-.028-3.044-1.852-3.044-1.853 0-2.136 1.445-2.136 2.951v5.656H9.351V9.216h3.414v1.561h.046c.477-.9 1.637-1.852 3.37-1.852 3.601 0 4.267 2.365 4.267 5.455v6.272zM5.337 7.433c-1.144 0-2.068-.926-2.068-2.069 0-1.144.924-2.069 2.068-2.069 1.144 0 2.069.925 2.069 2.069 0 1.143-.925 2.069-2.069 2.069zm1.787 13.019H3.55v-11.34h3.574v11.34zM22.223 0H1.776C.792 0 0 .776 0 1.729v20.542C0 23.223.792 24 1.776 24h20.447c.984 0 1.777-.776 1.777-1.729V1.729C24 .776 23.207 0 22.223 0z"/></svg>, shareUrl: `https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(postLink)}&title=${encodeURIComponent(postText.substring(0, 50))}&summary=${encodeURIComponent(postText)}` },
        { name: 'WhatsApp', icon: <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12.04 2c-5.45 0-9.91 4.46-9.91 9.91 0 1.75.5 3.42 1.46 4.88L2.05 22l5.03-1.32c1.42.77 3.04 1.21 4.96 1.21 5.45 0 9.91-4.46 9.91-9.91S17.49 2 12.04 2zm0 1.6c4.56 0 8.29 3.73 8.29 8.29 0 4.56-3.73 8.29-8.29 8.29-1.68 0-3.3-.5-4.66-1.42l-.33-.19-3.44.9 1.05-3.33-.21-.35c-.9-1.57-1.4-3.37-1.4-5.29 0-4.56 3.73-8.29 8.29-8.29zm-3.36 5.56c-.2-.09-.43-.14-.66-.14-.23 0-.46.05-.66.14-.2.09-.34.22-.44.38-.1.16-.16.35-.16.55 0 .2.06.39.16.55.1.16.24.29.44.38.2.09.43.14.66.14.23 0 .46-.05.66-.14.2-.09.34-.22.44-.38.1-.16.16-.35.16-.55 0-.2-.06-.39-.16-.55-.1-.16-.24-.29-.44-.38zm3.36 0c-.2-.09-.43-.14-.66-.14-.23 0-.46.05-.66.14-.2.09-.34.22-.44.38-.1.16-.16.35-.16.55 0 .2.06.39.16.55.1.16.24.29.44.38.2.09.43.14.66.14.23 0 .46-.05.66-.14.2-.09.34-.22.44-.38.1-.16.16-.35.16-.55 0-.2-.06-.39-.16-.55-.1-.16-.24-.29-.44-.38zm3.36 0c-.2-.09-.43-.14-.66-.14-.23 0-.46.05-.66.14-.2.09-.34.22-.44.38-.1.16-.16.35-.16.55 0 .2.06.39.16.55.1.16.24.29.44.38.2.09.43.14.66.14.23 0 .46-.05.66-.14.2-.09.34-.22.44-.38.1-.16.16-.35.16-.55 0-.2-.06-.39-.16-.55-.1-.16-.24-.29-.44-.38z"/></svg>, shareUrl: `https://api.whatsapp.com/send?text=${encodeURIComponent(postText + ' ' + postLink)}` },
    ];

    return (
        <Modal isOpen={isOpen} onClose={onClose}>
            <h2 className="text-2xl font-semibold text-blue-600 dark:text-blue-400 mb-4 text-center">Share Post</h2>
            <div className="space-y-4">
                <div>
                    <label htmlFor="post-share-text" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Post Content:
                    </label>
                    <textarea
                        id="post-share-text"
                        value={postText}
                        rows="3"
                        readOnly
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white resize-none"
                    ></textarea>
                </div>
                <div>
                    <label htmlFor="post-share-link" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Shareable Link:
                    </label>
                    <div className="flex gap-2">
                        <input
                            type="text"
                            id="post-share-link"
                            value={postLink}
                            readOnly
                            className="flex-grow p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white"
                        />
                        <button
                            onClick={copyToClipboard}
                            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-lg shadow-md transition-all duration-300 ease-in-out"
                        >
                            Copy
                        </button>
                    </div>
                    {copyMessage && (
                        <p className="text-green-600 dark:text-green-400 text-sm mt-2 text-center">{copyMessage}</p>
                    )}
                </div>

                <div className="mt-6">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">Share to Social Media:</h3>
                    <div className="flex justify-around gap-4 flex-wrap">
                        {socialMediaPlatforms.map((platform) => (
                            <a
                                key={platform.name}
                                href={platform.shareUrl}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="flex flex-col items-center p-3 bg-gray-100 dark:bg-gray-700 rounded-lg shadow-sm hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-200 text-gray-800 dark:text-gray-200"
                            >
                                {platform.icon}
                                <span className="text-xs mt-1">{platform.name}</span>
                            </a>
                        ))}
                    </div>
                </div>
            </div>
            <div className="mt-6 text-right">
                <button
                    onClick={onClose}
                    className="px-4 py-2 bg-gray-300 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-400 dark:hover:bg-gray-500 transition-colors duration-200 shadow-sm"
                >
                    Close
                </button>
            </div>
        </Modal>
    );
};


// Navigation Button Component
const NavButton = ({ label, view, currentView, setCurrentView, icon }) => (
    <button
        onClick={() => setCurrentView(view)}
        // Added w-1/6 to ensure equal width for 6 buttons (flex-grow also helps)
        className={`flex flex-col items-center justify-center flex-grow w-1/6 p-2 rounded-lg transition-all duration-300 ease-in-out
            ${currentView === view
                ? 'bg-blue-500 text-white shadow-md transform scale-105'
                : 'bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-blue-100 dark:hover:bg-gray-600'
            }`}
    >
        {icon}
        {/* Removed the text label from here */}
    </button>
);

// Gemini Q&A Modal Component
const GeminiQAModal = ({ isOpen, onClose, bookTitle, bookAuthor }) => {
    const [question, setQuestion] = useState('');
    const [answer, setAnswer] = useState('');
    const [isLoadingLLM, setIsLoadingLLM] = useState(false);
    const [llmError, setLlmError] = useState('');

    const handleAskGemini = async () => {
        if (!question.trim()) {
            setLlmError('Please enter a question.');
            return;
        }

        setIsLoadingLLM(true);
        setLlmError('');
        setAnswer(''); // Clear previous answer

        try {
            const prompt = `You are a helpful reading assistant. Based on the book "${bookTitle}" by "${bookAuthor}", answer the following question: "${question}". If you don't have enough information, state that you cannot answer the question based on the provided context.`;
            let chatHistory = [];
            chatHistory.push({ role: "user", parts: [{ text: prompt }] });
            const payload = { contents: chatHistory };
            const apiKey = ""; // API key will be provided by Canvas runtime
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            const result = await response.json();

            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                const text = result.candidates[0].content.parts[0].text;
                setAnswer(text);
            } else {
                setLlmError('Could not get a response from Gemini. Please try again.');
                console.error("Gemini API response structure unexpected:", result);
            }
        } catch (error) {
            console.error("Error calling Gemini API:", error);
            setLlmError('Failed to connect to Gemini API. Please check your network or try again later.');
        } finally {
            setIsLoadingLLM(false);
        }
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose}>
            <h2 className="text-2xl font-semibold text-blue-600 dark:text-blue-400 mb-4 text-center">
                Ask Gemini about "{bookTitle}"
            </h2>
            <p className="text-sm text-gray-600 dark:text-gray-300 mb-4 text-center">
                by {bookAuthor}
            </p>
            <div className="space-y-4">
                <div>
                    <label htmlFor="gemini-question" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Your Question:
                    </label>
                    <textarea
                        id="gemini-question"
                        value={question}
                        onChange={(e) => setQuestion(e.target.value)}
                        rows="3"
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white"
                        placeholder="e.g., Summarize the main plot points so far, What are the key themes in this book?"
                    ></textarea>
                </div>
                <button
                    onClick={handleAskGemini}
                    className="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition-all duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
                    disabled={isLoadingLLM || !question.trim()}
                >
                    {isLoadingLLM ? (
                        <>
                            <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Asking Gemini...
                        </>
                    ) : (
                        <>
                            Ask Gemini ✨
                        </>
                    )}
                </button>

                {llmError && (
                    <p className="text-red-600 dark:text-red-400 text-center text-sm">{llmError}</p>
                )}

                {answer && (
                    <div className="mt-6 p-4 bg-gray-100 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Gemini's Answer:</h3>
                        <p className="text-gray-800 dark:text-gray-200 whitespace-pre-wrap">{answer}</p>
                    </div>
                )}
            </div>
            <div className="mt-6 text-right">
                <button
                    onClick={onClose}
                    className="px-4 py-2 bg-gray-300 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-400 dark:hover:bg-gray-500 transition-colors duration-200 shadow-sm"
                >
                    Close
                </button>
            </div>
        </Modal>
    );
};

// Star Rating Component
const StarRating = ({ rating, setRating, editable = true }) => {
    return (
        <div className="flex justify-center items-center gap-1">
            {[1, 2, 3, 4, 5].map((star) => (
                <svg
                    key={star}
                    className={`w-6 h-6 cursor-pointer transition-colors duration-200 ${
                        star <= rating ? 'text-yellow-400' : 'text-gray-300 dark:text-gray-500'
                    }`}
                    fill="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                    onClick={() => editable && setRating(star)}
                >
                    <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"/>
                </svg>
            ))}
        </div>
    );
};


// Add Review Modal Component
const AddReviewModal = ({ isOpen, onClose, bookTitle, onAddReview }) => {
    const [reviewText, setReviewText] = useState('');
    const [rating, setRating] = useState(0); // New state for rating
    const [submissionMessage, setSubmissionMessage] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);

    const handleSubmitReview = async (e) => {
        e.preventDefault();
        if (!reviewText.trim()) {
            setSubmissionMessage('Please write your review.');
            return;
        }
        if (rating === 0) {
            setSubmissionMessage('Please provide a star rating.');
            return;
        }

        setIsSubmitting(true);
        setSubmissionMessage('');

        // Simulate API call or Firestore update for review
        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate delay

        onAddReview(reviewText, rating); // Pass rating to the parent function
        setSubmissionMessage('Review added successfully!');
        setReviewText('');
        setRating(0); // Reset rating
        setIsSubmitting(false);
        setTimeout(() => {
            setSubmissionMessage('');
            onClose();
        }, 1500);
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose}>
            <h2 className="text-2xl font-semibold text-blue-600 dark:text-blue-400 mb-4 text-center">
                Add Review for "{bookTitle}"
            </h2>
            <form onSubmit={handleSubmitReview} className="space-y-4">
                <div>
                    <label htmlFor="review-text" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Your Review:
                    </label>
                    <textarea
                        id="review-text"
                        value={reviewText}
                        onChange={(e) => setReviewText(e.target.value)}
                        rows="5"
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white"
                        placeholder="Share your thoughts on this book..."
                        required
                    ></textarea>
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Your Rating:
                    </label>
                    <StarRating rating={rating} setRating={setRating} />
                </div>
                <button
                    type="submit"
                    className="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition-all duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
                    disabled={isSubmitting}
                >
                    {isSubmitting ? 'Submitting Review...' : 'Submit Review'}
                </button>
            </form>
            {submissionMessage && (
                <p className={`mt-4 text-center ${submissionMessage.includes('successfully') ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
                    {submissionMessage}
                </p>
            )}
        </Modal>
    );
};

// Edit Review Modal Component (New)
const EditReviewModal = ({ isOpen, onClose, bookId, bookTitle, initialReviewText, initialRating, onUpdateReview }) => {
    const [reviewText, setReviewText] = useState(initialReviewText);
    const [rating, setRating] = useState(initialRating);
    const [submissionMessage, setSubmissionMessage] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);

    // Reset state when modal opens with new initial values
    useEffect(() => {
        setReviewText(initialReviewText);
        setRating(initialRating);
        setSubmissionMessage('');
    }, [isOpen, initialReviewText, initialRating]);

    const handleSubmitUpdate = async (e) => {
        e.preventDefault();
        if (!reviewText.trim()) {
            setSubmissionMessage('Please write your review.');
            return;
        }
        if (rating === 0) {
            setSubmissionMessage('Please provide a star rating.');
            return;
        }

        setIsSubmitting(true);
        setSubmissionMessage('');

        // Simulate API call or Firestore update for review
        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate delay

        onUpdateReview(bookId, reviewText, rating); // Call the parent function to update review
        setSubmissionMessage('Review updated successfully!');
        setIsSubmitting(false);
        setTimeout(() => {
            setSubmissionMessage('');
            onClose();
        }, 1500);
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose}>
            <h2 className="text-2xl font-semibold text-blue-600 dark:text-blue-400 mb-4 text-center">
                Edit Review for "{bookTitle}"
            </h2>
            <form onSubmit={handleSubmitUpdate} className="space-y-4">
                <div>
                    <label htmlFor="edit-review-text" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Your Review:
                    </label>
                    <textarea
                        id="edit-review-text"
                        value={reviewText}
                        onChange={(e) => setReviewText(e.target.value)}
                        rows="5"
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white"
                        placeholder="Share your thoughts on this book..."
                        required
                    ></textarea>
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Your Rating:
                    </label>
                    <StarRating rating={rating} setRating={setRating} />
                </div>
                <button
                    type="submit"
                    className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition-all duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
                    disabled={isSubmitting}
                >
                    {isSubmitting ? 'Updating Review...' : 'Update Review'}
                </button>
            </form>
            {submissionMessage && (
                <p className={`mt-4 text-center ${submissionMessage.includes('successfully') ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
                    {submissionMessage}
                </p>
            )}
        </Modal>
    );
};


// Reusable Book Section Component (used by BookList)
const BookSection = ({ title, books, status, updateBookStatus, deleteBook, onAskGemini, onAddReview, onEditReview, showProgress, recommendations }) => {
    const allStatuses = ['reading', 'to-read', 'finished'];

    return (
        <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
            <h2 className="text-2xl font-semibold text-blue-600 dark:text-blue-400 mb-4 pb-2 border-b border-gray-200 dark:border-gray-700">
                {title}
            </h2>
            {books.length === 0 ? (
                <p className="text-gray-500 dark:text-gray-400">No books in this category yet.</p>
            ) : (
                <ul className="space-y-4">
                    {books.map((book) => (
                        <li key={book.id} className="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg shadow-sm flex flex-col md:flex-row items-start md:items-center justify-between gap-3">
                            <div className="flex-grow">
                                <h3 className="text-lg font-medium text-gray-900 dark:text-white">{book.title}</h3>
                                <p className="text-sm text-gray-600 dark:text-gray-300">by {book.author}</p>
                                {book.genres && book.genres.length > 0 && (
                                    <div className="flex flex-wrap gap-1 mt-1">
                                        {book.genres.map((genre, idx) => (
                                            <span key={idx} className="px-2 py-0.5 bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200 text-xs rounded-full">
                                                {genre}
                                            </span>
                                        ))}
                                    </div>
                                )}
                                {showProgress && book.progress && ( // Conditionally show progress
                                    <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                                        Progress: {book.progress}
                                    </p>
                                )}
                                {status === 'finished' && book.reviewText && (
                                    <div className="mt-2">
                                        <p className="text-sm text-gray-700 dark:text-gray-300">
                                            <span className="font-semibold">Your Review:</span> {book.reviewText}
                                        </p>
                                        <div className="flex items-center mt-1">
                                            <span className="text-sm font-semibold text-gray-700 dark:text-gray-300 mr-1">Rating:</span>
                                            <StarRating rating={book.rating} editable={false} />
                                        </div>
                                    </div>
                                )}
                            </div>
                            <div className="flex flex-wrap gap-2 text-sm mt-3 md:mt-0">
                                {/* Status dropdown */}
                                <select
                                    value={book.status}
                                    onChange={(e) => updateBookStatus(book.id, e.target.value)}
                                    className="p-2 rounded-md bg-white dark:bg-gray-600 border border-gray-300 dark:border-gray-500 text-gray-800 dark:text-gray-200 focus:ring-blue-500 focus:border-blue-500"
                                >
                                    {allStatuses.map((s) => (
                                        <option key={s} value={s} className="capitalize">
                                            {s.replace('-', ' ')}
                                        </option>
                                    ))}
                                </select>
                                {/* Gemini button for "Currently Reading" */}
                                {status === 'reading' && (
                                    <button
                                        onClick={() => onAskGemini(book.title, book.author)}
                                        className="px-3 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors duration-200 shadow-sm flex items-center gap-1"
                                    >
                                        Ask Gemini ✨
                                    </button>
                                )}
                                {/* Add/Edit Review button for "Finished Books" */}
                                {status === 'finished' && (
                                    book.reviewText ? (
                                        <button
                                            onClick={() => onEditReview(book.id, book.title, book.reviewText, book.rating)}
                                            className="px-3 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 transition-colors duration-200 shadow-sm flex items-center gap-1"
                                        >
                                            Edit Review
                                        </button>
                                    ) : (
                                        <button
                                            onClick={() => onAddReview(book.title)}
                                            className="px-3 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors duration-200 shadow-sm flex items-center gap-1"
                                        >
                                            Add Review
                                        </button>
                                    )
                                )}
                                {/* Delete button */}
                                <button
                                    onClick={() => deleteBook(book.id)}
                                    className="px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors duration-200 shadow-sm"
                                >
                                    Delete
                                </button>
                            </div>
                        </li>
                    ))}
                </ul>
            )}

            {/* Recommendations Section (only for 'reading' status) */}
            {status === 'reading' && recommendations && recommendations.length > 0 && (
                <div className="mt-8 pt-4 border-t border-gray-200 dark:border-gray-700">
                    <h3 className="text-xl font-semibold text-purple-600 dark:text-purple-400 mb-4">Recommended for You</h3>
                    <p className="text-gray-700 dark:text-gray-300 mb-3 text-sm">
                        Books popular with other readers that you might enjoy:
                    </p>
                    <ul className="space-y-3">
                        {recommendations.map((rec, index) => (
                            <li key={index} className="p-3 bg-blue-50 dark:bg-blue-900 rounded-lg shadow-sm">
                                <p className="text-md font-medium text-blue-800 dark:text-blue-100">{rec.title}</p>
                                <p className="text-sm text-blue-600 dark:text-blue-200">by {rec.author}</p>
                                <p className="text-xs text-blue-500 dark:text-blue-300 mt-1">
                                    Being read by: {rec.readers.join(', ')}
                                </p>
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
};

// New: BookSelectionModal Component
const BookSelectionModal = ({ isOpen, onClose, books, onSelectBook }) => {
    return (
        <Modal isOpen={isOpen} onClose={onClose}>
            <h2 className="text-2xl font-semibold text-blue-600 dark:text-blue-400 mb-4 text-center">
                Select a Book
            </h2>
            <p className="text-gray-700 dark:text-gray-300 mb-4 text-center">
                Multiple books found. Please select the correct one:
            </p>
            {books.length === 0 ? (
                <p className="text-gray-500 dark:text-gray-400 text-center">No books to display.</p>
            ) : (
                <ul className="space-y-3 max-h-80 overflow-y-auto pr-2">
                    {books.map((book, index) => (
                        <li
                            key={index}
                            className="p-3 bg-gray-100 dark:bg-gray-700 rounded-lg shadow-sm cursor-pointer hover:bg-blue-50 dark:hover:bg-blue-900 transition-colors duration-200"
                            onClick={() => {
                                onSelectBook(book);
                                onClose();
                            }}
                        >
                            <p className="text-lg font-medium text-gray-900 dark:text-white">{book.title}</p>
                            <p className="text-sm text-gray-600 dark:text-gray-300">by {book.author}</p>
                            {book.isbn && (
                                <p className="text-xs text-gray-500 dark:text-gray-400">ISBN: {book.isbn}</p>
                            )}
                        </li>
                    ))}
                </ul>
            )}
            <div className="mt-6 text-right">
                <button
                    onClick={onClose}
                    className="px-4 py-2 bg-gray-300 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-400 dark:hover:bg-gray-500 transition-colors duration-200 shadow-sm"
                >
                    Close
                </button>
            </div>
        </Modal>
    );
};


// Add Book Form Component (now used within a Modal)
const AddBookForm = ({ db, userId, onClose }) => {
    const [title, setTitle] = useState('');
    const [author, setAuthor] = useState('');
    const [isbn, setIsbn] = useState(''); // New state for ISBN
    const [status, setStatus] = useState('to-read'); // Default status
    const [genres, setGenres] = useState([]); // State for genres (will be auto-populated)
    const [submissionMessage, setSubmissionMessage] = useState(''); // Feedback message
    const [isSubmitting, setIsSubmitting] = useState(false); // Loading state for adding book
    const [isFetchingBook, setIsFetchingBook] = useState(false); // Loading state for fetching book details
    const [isSearchingByName, setIsSearchingByName] = useState(false); // New: Loading state for name search

    // New states for BookSelectionModal
    const [showBookSelectionModal, setShowBookSelectionModal] = useState(false);
    const [searchResults, setSearchResults] = useState([]);

    // Function to handle selection from BookSelectionModal
    const handleBookSelected = (selectedBook) => {
        setTitle(selectedBook.title || '');
        setAuthor(selectedBook.author || 'Unknown Author');
        setIsbn(selectedBook.isbn || '');
        setGenres(selectedBook.genres || []); // Set genres from selected book
        setShowBookSelectionModal(false); // Close the modal
    };


    // Function to fetch book details from Open Library API using ISBN
    const handleFetchBookDetails = async () => {
        setSubmissionMessage('');
        if (!isbn) {
            setSubmissionMessage('Please enter an ISBN to fetch book details.');
            return;
        }

        setIsFetchingBook(true);
        try {
            const response = await fetch(`https://openlibrary.org/api/books?bibkeys=ISBN:${isbn}&format=json&jscmd=data`);
            const data = await response.json();

            const bookData = data[`ISBN:${isbn}`];
            if (bookData && bookData.title) {
                setTitle(bookData.title);
                const authors = bookData.authors ? bookData.authors.map(a => a.name).join(', ') : 'Unknown Author';
                setAuthor(authors);
                // Attempt to get genres from Open Library API (subjects are often genres)
                const fetchedGenres = bookData.subjects ? bookData.subjects.map(s => s.name) : [];
                setGenres(fetchedGenres.length > 0 ? fetchedGenres : ['Fiction']); // Default to Fiction if no genres found
                setSubmissionMessage('Book details fetched successfully!');
            } else {
                setSubmissionMessage('No book found for this ISBN. Please try another or enter details manually.');
                setTitle('');
                setAuthor('');
                setGenres([]); // Clear genres if no book found
            }
        } catch (error) {
            console.error("Error fetching book details by ISBN:", error);
            setSubmissionMessage('Error fetching book details. Please check ISBN and try again.');
        } finally {
            setIsFetchingBook(false);
        }
    };

    // New: Function to search book details from Open Library API using Title and Author
    const handleSearchByName = async () => {
        setSubmissionMessage('');
        if (!title.trim() && !author.trim()) {
            setSubmissionMessage('Please enter a Title or Author to search.');
            return;
        }

        setIsSearchingByName(true);
        try {
            let queryUrl = `https://openlibrary.org/search.json?`;
            if (title.trim()) {
                queryUrl += `title=${encodeURIComponent(title.trim())}`;
            }
            if (author.trim()) {
                queryUrl += `${title.trim() ? '&' : ''}author=${encodeURIComponent(author.trim())}`;
            }

            const response = await fetch(queryUrl);
            const data = await response.json();

            if (data.docs && data.docs.length > 0) {
                const processedResults = data.docs.map(doc => ({
                    title: doc.title || 'Unknown Title',
                    author: doc.author_name ? doc.author_name.join(', ') : 'Unknown Author',
                    isbn: doc.isbn && doc.isbn.length > 0 ? doc.isbn[0] : null,
                    genres: doc.subject_facet ? doc.subject_facet : (doc.subject || []),
                }));

                if (processedResults.length > 1) {
                    setSearchResults(processedResults);
                    setShowBookSelectionModal(true); // Show modal if multiple results
                } else {
                    const firstResult = processedResults[0];
                    setTitle(firstResult.title);
                    setAuthor(firstResult.author);
                    setIsbn(firstResult.isbn);
                    setGenres(firstResult.genres.length > 0 ? firstResult.genres : ['Fiction']); // Default to Fiction if no genres found
                    setSubmissionMessage('Book details found and populated!');
                }
            } else {
                setSubmissionMessage('No book found for this title/author. Please try another or enter details manually.');
                setIsbn(''); // Clear ISBN if no match found
                setGenres([]); // Clear genres
            }
        } catch (error) {
            console.error("Error searching book details by name:", error);
            setSubmissionMessage('Error searching book details. Please check your input and try again.');
        } finally {
            setIsSearchingByName(false);
        }
    };

    // Simulate camera scanning by prompting for ISBN
    const handleScanISBN = () => {
        const scannedIsbn = prompt("Simulating camera scan: Please enter ISBN (e.g., 978-0321765723)");
        if (scannedIsbn) {
            setIsbn(scannedIsbn);
            handleFetchBookDetails(); // Automatically try to fetch details after "scan"
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setSubmissionMessage('');
        setIsSubmitting(true);

        if (!title || !author) {
            setSubmissionMessage('Please enter both title and author.');
            setIsSubmitting(false);
            return;
        }

        // --- Placeholder for automatic genre assignment ---
        // In a real application, if genres were not fetched by API,
        // you might use a default or a more sophisticated NLP approach here.
        // For now, if genres are empty after search/fetch, assign a default.
        const finalGenres = genres.length > 0 ? genres : ['Fiction']; // Default if no genres were fetched
        // --- End Placeholder ---

        try {
            // Add a new document to the 'books' collection for the specific user
            const booksCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/books`);
            await addDoc(booksCollectionRef, {
                title,
                author,
                isbn: isbn || null, // Store ISBN if available
                status,
                genres: finalGenres, // Save auto-populated or default genres
                createdAt: new Date().toISOString(), // Timestamp for tracking
                progress: status === 'reading' ? 'Not started' : null, // Initialize progress for reading books
                reviewText: null, // Initialize reviewText as null
                rating: null, // Initialize rating as null
            });
            setSubmissionMessage('Book added successfully!');
            setTitle(''); // Clear form fields
            setAuthor('');
            setIsbn(''); // Clear ISBN field
            setStatus('to-read');
            setGenres([]); // Clear genres state for next input
            // Close modal after successful addition
            setTimeout(() => {
                setSubmissionMessage('');
                onClose();
            }, 1500);
        } catch (e) {
            console.error("Error adding document: ", e);
            setSubmissionMessage('Error adding book. Please try again.');
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <div className="p-4">
            <h2 className="text-2xl font-semibold text-blue-600 dark:text-blue-400 mb-6 text-center">Add New Book</h2>
            <form onSubmit={handleSubmit} className="space-y-5">
                <div>
                    <label htmlFor="title" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Book Title
                    </label>
                    <input
                        type="text"
                        id="title"
                        value={title}
                        onChange={(e) => setTitle(e.target.value)}
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white"
                        placeholder="Enter book title"
                        required
                    />
                </div>
                <div>
                    <label htmlFor="author" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Author
                    </label>
                    <input
                        type="text"
                        id="author"
                        value={author}
                        onChange={(e) => setAuthor(e.target.value)}
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white"
                        placeholder="Enter author's name"
                        required
                    />
                </div>
                <div className="flex gap-2 justify-end">
                    <button
                        type="button"
                        onClick={handleSearchByName}
                        className="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white font-bold rounded-lg shadow-md transition-all duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled={isSearchingByName || (!title.trim() && !author.trim())}
                    >
                        {isSearchingByName ? 'Searching...' : 'Search by Name'}
                    </button>
                </div>
                <div>
                    <label htmlFor="isbn" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        ISBN (Optional, auto-filled by search)
                    </label>
                    <div className="flex gap-2">
                        <input
                            type="text"
                            id="isbn"
                            value={isbn}
                            onChange={(e) => setIsbn(e.target.value)}
                            className="flex-grow p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white"
                            placeholder="e.g., 978-0321765723"
                        />
                        <button
                            type="button"
                            onClick={handleFetchBookDetails}
                            className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white font-bold rounded-lg shadow-md transition-all duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
                            disabled={isFetchingBook || !isbn.trim()}
                        >
                            {isFetchingBook ? 'Fetching...' : 'Fetch by ISBN'}
                        </button>
                        <button
                            type="button"
                            onClick={handleScanISBN}
                            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-lg shadow-md transition-all duration-300 ease-in-out"
                        >
                            Scan ISBN
                        </button>
                    </div>
                </div>
                <div>
                    <label htmlFor="status" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Status
                    </label>
                    <select
                        id="status"
                        value={status}
                        onChange={(e) => setStatus(e.target.value)}
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white"
                    >
                        <option value="to-read">Want to Read</option>
                        <option value="reading">Currently Reading</option>
                        <option value="finished">Finished</option>
                    </select>
                </div>
                {/* Genres field is now hidden, as it will be auto-populated */}
                {/* <div className="hidden">
                    <label htmlFor="genres" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Genres (Auto-populated)
                    </label>
                    <select
                        id="genres"
                        multiple
                        value={genres}
                        onChange={handleGenreChange} // Still needed if we want to programmatically change it
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white h-32 overflow-y-auto"
                        disabled // Make it non-interactive
                    >
                        {COMMON_GENRES.map(genre => (
                            <option key={genre} value={genre}>{genre}</option>
                        ))}
                    </select>
                    <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                        This field is automatically populated based on book details.
                    </p>
                </div> */}
                <button
                    type="submit"
                    className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition-all duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
                    disabled={isSubmitting || isFetchingBook || isSearchingByName}
                >
                    {isSubmitting ? 'Adding Book...' : 'Add Book'}
                </button>
            </form>
            {submissionMessage && (
                <p className={`mt-4 text-center ${submissionMessage.includes('successfully') || submissionMessage.includes('found') ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
                    {submissionMessage}
                </p>
            )}

            {/* Book Selection Modal */}
            <BookSelectionModal
                isOpen={showBookSelectionModal}
                onClose={() => setShowBookSelectionModal(false)}
                books={searchResults}
                onSelectBook={handleBookSelected}
            />
        </div>
    );
};

// Book List Component (used by App)
const BookList = ({ db, userId, onGainXP }) => {
    const [readingBooks, setReadingBooks] = useState([]);
    const [toReadBooks, setToReadBooks] = useState([]);
    const [finishedBooks, setFinishedBooks] = useState([]);
    const [loadingBooks, setLoadingBooks] = useState(true);
    const [error, setError] = useState('');
    const [activeSubTab, setActiveSubTab] = useState('reading'); // Default to 'reading'
    const [showAddBookModal, setShowAddBookModal] = useState(false); // State for modal visibility
    const [recommendedBooks, setRecommendedBooks] = useState([]); // New state for recommendations

    // Mock data for other users' reading lists
    const otherUsersReading = [
        { userId: 'userA', books: [{ title: 'The Silent Patient', author: 'Alex Michaelides' }, { title: 'Where the Crawdads Sing', author: 'Delia Owens' }] },
        { userId: 'userB', books: [{ title: 'Project Hail Mary', author: 'Andy Weir' }, { title: 'Dune', author: 'Frank Herbert' }] },
        { userId: 'userC', books: [{ title: 'The Midnight Library', author: 'Matt Haig' }, { title: 'Circe', author: 'Madeline Miller' }] },
        { userId: 'userD', books: [{ title: 'The Silent Patient', author: 'Alex Michaelides' }, { title: 'The Henna Artist', author: ' Alka Joshi' }] },
    ];

    // State for Gemini Q&A modal
    const [showGeminiQAModal, setShowGeminiQAModal] = useState(false);
    const [selectedBookForGemini, setSelectedBookForGemini] = useState({ title: '', author: '' });

    // State for Add Review modal
    const [showAddReviewModal, setShowAddReviewModal] = useState(false);
    const [selectedBookForReview, setSelectedBookForReview] = useState('');

    // State for Edit Review modal
    const [showEditReviewModal, setShowEditReviewModal] = useState(false);
    const [bookToEdit, setBookToEdit] = useState(null);


    useEffect(() => {
        if (!db || !userId) return;

        // Construct the collection path for the user's books
        const booksCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/books`);

        // Set up real-time listener for books
        const unsubscribe = onSnapshot(booksCollectionRef, (snapshot) => {
            const reading = [];
            const toRead = [];
            const finished = [];
            const userBookTitles = new Set(); // To quickly check if user already has a book

            snapshot.forEach((doc) => {
                const book = { id: doc.id, ...doc.data() };
                userBookTitles.add(book.title.toLowerCase()); // Add user's book titles to the set
                if (book.status === 'reading') {
                    reading.push({ ...book, progress: book.progress || 'Not started' }); // Add mock progress
                } else if (book.status === 'to-read') {
                    toRead.push(book);
                } else if (book.status === 'finished') {
                    finished.push(book);
                }
            });

            // Sort books alphabetically by title for consistent display
            reading.sort((a, b) => a.title.localeCompare(b.title));
            toRead.sort((a, b) => a.title.localeCompare(b.title));
            finished.sort((a, b) => a.title.localeCompare(b.title));

            setReadingBooks(reading);
            setToReadBooks(toRead);
            setFinishedBooks(finished);
            setLoadingBooks(false);

            // Generate recommendations
            const newRecommendations = [];
            const recommendedTitles = new Set(); // To avoid duplicate recommendations

            otherUsersReading.forEach(otherUser => {
                // Exclude the current user's mock data from recommendations if their ID matches
                if (otherUser.userId === userId.substring(0, 8)) return;

                otherUser.books.forEach(book => {
                    // Only recommend if the user doesn't already have the book and it's not already recommended
                    if (!userBookTitles.has(book.title.toLowerCase()) && !recommendedTitles.has(book.title.toLowerCase())) {
                        const existingRecIndex = newRecommendations.findIndex(rec => rec.title.toLowerCase() === book.title.toLowerCase());
                        if (existingRecIndex !== -1) {
                            // If book already in recommendations, just add the new reader
                            newRecommendations[existingRecIndex].readers.push(otherUser.userId);
                        } else {
                            // Add new recommendation
                            newRecommendations.push({ ...book, readers: [otherUser.userId] });
                            recommendedTitles.add(book.title.toLowerCase());
                        }
                    }
                });
            });
            setRecommendedBooks(newRecommendations);

        }, (err) => {
            console.error("Error fetching books:", err);
            setError("Failed to load your books. Please try again.");
            setLoadingBooks(false);
        });

        // Clean up the listener when the component unmounts
        return () => unsubscribe();
    }, [db, userId]); // Re-run if db or userId changes

    // Function to update book status
    const updateBookStatus = async (bookId, newStatus) => {
        try {
            const bookRef = doc(db, `artifacts/${appId}/users/${userId}/books`, bookId);
            await updateDoc(bookRef, { status: newStatus });
        } catch (e) {
            console.error("Error updating book status:", e);
            setError("Failed to update book status.");
        }
    };

    // Function to delete a book
    const deleteBook = async (bookId) => {
        try {
            // In a real app, you might want a confirmation modal here instead of direct deletion
            const bookRef = doc(db, `artifacts/${appId}/users/${userId}/books`, bookId);
            await deleteDoc(bookRef);
        } catch (e) {
            console.error("Error deleting book:", e);
            setError("Failed to delete book.");
        }
    };

    const handleAskGeminiClick = (title, author) => {
        setSelectedBookForGemini({ title, author });
        setShowGeminiQAModal(true);
    };

    const handleAddReviewClick = (bookTitle) => {
        setSelectedBookForReview(bookTitle);
        setShowAddReviewModal(true);
    };

    const handleReviewSubmitted = async (reviewText, rating) => {
        // Find the book that was just reviewed (assuming it's the one in selectedBookForReview)
        const bookToUpdate = finishedBooks.find(book => book.title === selectedBookForReview);
        if (bookToUpdate) {
            try {
                const bookRef = doc(db, `artifacts/${appId}/users/${userId}/books`, bookToUpdate.id);
                await updateDoc(bookRef, {
                    reviewText: reviewText,
                    rating: rating,
                });
                onGainXP(15); // Award 15 XP for a new book review
            } catch (e) {
                console.error("Error adding review to book:", e);
                setError("Failed to save review.");
            }
        }
    };

    const handleEditReviewClick = (bookId, bookTitle, reviewText, rating) => {
        setBookToEdit({ id: bookId, title: bookTitle, reviewText: reviewText, rating: rating });
        setShowEditReviewModal(true);
    };

    const handleReviewUpdated = async (bookId, newReviewText, newRating) => {
        try {
            const bookRef = doc(db, `artifacts/${appId}/users/${userId}/books`, bookId);
            await updateDoc(bookRef, {
                reviewText: newReviewText,
                rating: newRating,
            });
            // No additional XP for editing, as per discussion
        } catch (e) {
            console.error("Error updating review:", e);
            setError("Failed to update review.");
        }
    };


    if (loadingBooks) {
        return <div className="text-center py-8 text-gray-600 dark:text-gray-400">Loading your books...</div>;
    }

    if (error) {
        return <div className="text-center py-8 text-red-500">{error}</div>;
    }

    return (
        <div className="mt-4">
            {/* Add New Book Button - Conditional visibility */}
            {(activeSubTab === 'reading' || activeSubTab === 'to-read') && (
                <div className="flex justify-end mb-4">
                    <button
                        onClick={() => setShowAddBookModal(true)}
                        className="px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-bold rounded-lg shadow-md transition-all duration-300 ease-in-out"
                    >
                        Add New Book
                    </button>
                </div>
            )}

            <div className="flex flex-col md:flex-row gap-6 mt-8">
                {/* Vertical Tabs for Book Sections */}
                <div className="md:w-1/4 bg-white dark:bg-gray-800 p-4 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
                    <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 border-b pb-2 border-gray-200 dark:border-gray-700">My Reads Categories</h3>
                    <ul className="space-y-2">
                        <li>
                            <button
                                onClick={() => setActiveSubTab('reading')}
                                className={`w-full text-left px-4 py-2 rounded-lg transition-colors duration-200
                                    ${activeSubTab === 'reading'
                                        ? 'bg-blue-500 text-white shadow-md'
                                        : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-blue-100 dark:hover:bg-gray-600'
                                    }`}
                            >
                                Currently Reading
                            </button>
                        </li>
                        <li>
                            <button
                                onClick={() => setActiveSubTab('to-read')}
                                className={`w-full text-left px-4 py-2 rounded-lg transition-colors duration-200
                                    ${activeSubTab === 'to-read'
                                        ? 'bg-blue-500 text-white shadow-md'
                                        : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-blue-100 dark:hover:bg-gray-600'
                                    }`}
                            >
                                Want to Read
                            </button>
                        </li>
                        <li>
                            <button
                                onClick={() => setActiveSubTab('finished')}
                                className={`w-full text-left px-4 py-2 rounded-lg transition-colors duration-200
                                    ${activeSubTab === 'finished'
                                        ? 'bg-blue-500 text-white shadow-md'
                                        : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-blue-100 dark:hover:bg-gray-600'
                                    }`}
                            >
                                Finished Books
                            </button>
                        </li>
                    </ul>
                </div>

                {/* Content Area for Selected Tab */}
                <div className="md:w-3/4">
                    {/* Render sections based on activeSubTab */}
                    {activeSubTab === 'reading' && (
                        <BookSection
                            title="Currently Reading"
                            books={readingBooks}
                            status="reading"
                            updateBookStatus={updateBookStatus}
                            deleteBook={deleteBook}
                            onAskGemini={handleAskGeminiClick} // Pass the handler
                            showProgress={true}
                            recommendations={recommendedBooks} // Pass recommendations
                        />
                    )}
                    {activeSubTab === 'to-read' && (
                        <BookSection
                            title="Want to Read"
                            books={toReadBooks}
                            status="to-read"
                            updateBookStatus={updateBookStatus}
                            deleteBook={deleteBook}
                            showProgress={false}
                        />
                    )}
                    {activeSubTab === 'finished' && (
                        <BookSection
                            title="Finished Books"
                            books={finishedBooks}
                            status="finished"
                            updateBookStatus={updateBookStatus}
                            deleteBook={deleteBook}
                            onAddReview={handleAddReviewClick} // Pass the handler
                            onEditReview={handleEditReviewClick} // Pass the handler
                            showProgress={false}
                        />
                    )}
                </div>
            </div>

            {/* Add Book Modal */}
            <Modal isOpen={showAddBookModal} onClose={() => setShowAddBookModal(false)}>
                <AddBookForm db={db} userId={userId} onClose={() => setShowAddBookModal(false)} />
            </Modal>

            {/* Gemini Q&A Modal */}
            <GeminiQAModal
                isOpen={showGeminiQAModal}
                onClose={() => setShowGeminiQAModal(false)}
                bookTitle={selectedBookForGemini.title}
                bookAuthor={selectedBookForGemini.author}
            />

            {/* Add Review Modal */}
            <AddReviewModal
                isOpen={showAddReviewModal}
                onClose={() => setShowAddReviewModal(false)}
                bookTitle={selectedBookForReview}
                onAddReview={handleReviewSubmitted}
            />

            {/* Edit Review Modal */}
            {bookToEdit && (
                <EditReviewModal
                    isOpen={showEditReviewModal}
                    onClose={() => setShowEditReviewModal(false)}
                    bookId={bookToEdit.id}
                    bookTitle={bookToEdit.title}
                    initialReviewText={bookToEdit.reviewText}
                    initialRating={bookToEdit.rating}
                    onUpdateReview={handleReviewUpdated}
                />
            )}
        </div>
    );
};

// ReplyInput Component (used by Community)
const ReplyInput = ({ postId, onReply, currentUser, onGainXP }) => {
    const [replyText, setReplyText] = useState('');

    const handleSubmitReply = (e) => {
        e.preventDefault();
        if (replyText.trim() === '') return;

        onReply(postId, replyText);
        onGainXP(5); // Award 5 XP for a community post
        setReplyText(''); // Clear the input after submitting
    };

    return (
        <form onSubmit={handleSubmitReply} className="mt-4 flex gap-2">
            <input
                type="text"
                value={replyText}
                onChange={(e) => setReplyText(e.target.value)}
                placeholder={`Reply as ${currentUser}...`}
                className="flex-grow p-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white text-sm"
            />
            <button
                type="submit"
                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-200 shadow-sm disabled:opacity-50 disabled:cursor-not-allowed"
                disabled={replyText.trim() === ''}
            >
                Reply
            </button>
        </form>
    );
};

// ReplyItem Component (used by Community)
const ReplyItem = ({ reply, postId, replyIndex, onLike, currentUser }) => {
    const isLiked = reply.likes.includes(currentUser);

    return (
        <li className="bg-gray-100 dark:bg-gray-600 p-2 rounded-md text-sm text-gray-800 dark:text-gray-200 flex items-center justify-between">
            <div>
                <span className="font-semibold">{reply.userId}:</span> {reply.text}
                <span className="block text-xs text-gray-500 dark:text-gray-400 mt-1">
                    {new Date(reply.timestamp).toLocaleString()}
                </span>
            </div>
            <button
                onClick={() => onLike(postId, replyIndex)}
                className="flex items-center gap-1 p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-500 transition-colors duration-200"
                aria-label={isLiked ? "Unlike" : "Like"}
            >
                <svg
                    className={`w-5 h-5 ${isLiked ? 'text-red-500' : 'text-gray-400 dark:text-gray-300'}`}
                    fill="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                </svg>
                <span className="text-xs">{reply.likes.length}</span>
            </button>
        </li>
    );
};

// Community Component (used by App)
const Community = ({ db, userId, onGainXP, currentUserFollowing, setCurrentUserFollowing, currentUserReadingBooks }) => {
    // Mock data for all public user posts.
    // In a real app, this would be fetched from a public Firestore collection
    // where users share their public reading activities.
    const allPublicUserPosts = [
        {
            id: 'user1', // Changed to match mock user IDs in Tournament
            name: 'Bookworm_Alice',
            isProfilePublic: true,
            currentRead: 'The Alchemist',
            note: 'A truly inspiring journey of self-discovery.',
            booksReading: [{ title: 'The Alchemist' }, { title: 'Dune' }], // Added Dune to simulate common book
            replies: [],
            likes: []
        },
        {
            id: 'user2',
            name: 'Reader_Bob',
            isProfilePublic: true,
            currentRead: 'Dune',
            note: 'Getting lost in the intricate world-building.',
            booksReading: [{ title: 'Dune' }, { title: 'Foundation' }],
            replies: [],
            likes: []
        },
        {
            id: 'user3',
            name: 'Lit_Charlie',
            isProfilePublic: false, // Private profile
            currentRead: 'Sapiens',
            note: 'Mind-blowing insights into human history.',
            booksReading: [{ title: 'Sapiens' }],
            replies: [],
            likes: []
        },
        {
            id: 'user4',
            name: 'PageTurner_Dave',
            isProfilePublic: true,
            currentRead: '1984',
            note: 'A chilling and thought-provoking classic.',
            booksReading: [{ title: '1984' }, { title: 'Brave New World' }],
            replies: [],
            likes: []
        },
        {
            id: 'user5',
            name: 'StorySeeker_Eve',
            isProfilePublic: true,
            currentRead: 'The Midnight Library',
            note: 'Exploring alternate realities and choices.',
            booksReading: [{ title: 'The Midnight Library' }, { title: 'Where the Crawdads Sing' }],
            replies: [],
            likes: []
        },
        {
            id: 'user6',
            name: 'NovelNerd_Frank',
            isProfilePublic: true,
            currentRead: 'Project Hail Mary',
            note: 'Absolutely brilliant sci-fi!',
            booksReading: [{ title: 'Project Hail Mary' }],
            replies: [],
            likes: []
        },
        {
            id: 'user7',
            name: 'ChapterChamp_Grace',
            isProfilePublic: true,
            currentRead: 'The Great Gatsby',
            note: 'A timeless classic revisited.',
            booksReading: [{ title: 'The Great Gatsby' }],
            replies: [],
            likes: []
        },
    ];

    const [filteredCommunityReads, setFilteredCommunityReads] = useState([]);
    const [showShareModal, setShowShareModal] = useState(false);
    const [selectedPostForShare, setSelectedPostForShare] = useState(null);
    const [message, setMessage] = useState(''); // State for follow/unfollow messages

    // Effect to filter community reads based on following and shared books
    useEffect(() => {
        const currentUserReadingTitles = new Set(currentUserReadingBooks.map(book => book.title.toLowerCase()));

        const newFilteredReads = allPublicUserPosts.filter(post => {
            // Exclude current user's own posts
            if (post.id === userId) return false;

            // Check if user is following this person
            const isFollowing = currentUserFollowing.includes(post.id);

            // Check if they are reading any common books
            const isReadingSameBook = post.booksReading.some(book =>
                currentUserReadingTitles.has(book.title.toLowerCase())
            );

            // If profile is private, only show if current user is following them
            if (!post.isProfilePublic && !isFollowing) {
                return false;
            }

            // Show if following OR reading the same book (and profile is public or followed)
            return isFollowing || isReadingSameBook;
        });

        // Ensure unique posts (in case a user is both followed and reading same book)
        const uniqueFilteredReads = Array.from(new Map(newFilteredReads.map(item => [item['id'], item])).values());

        setFilteredCommunityReads(uniqueFilteredReads);
    }, [currentUserFollowing, currentUserReadingBooks, userId]); // Re-run when these dependencies change

    const handleReply = (postId, replyText) => {
        if (replyText.trim() === '') return;

        setFilteredCommunityReads(prevReads =>
            prevReads.map(post =>
                post.id === postId
                    ? { ...post, replies: [...post.replies, { userId: userId.substring(0, 8), text: replyText, timestamp: new Date().toISOString(), likes: [] }] }
                    : post
            )
        );
    };

    const handleLikeReply = (postId, replyIndex) => {
        setFilteredCommunityReads(prevReads =>
            prevReads.map(post => {
                if (post.id === postId) {
                    const updatedReplies = post.replies.map((reply, idx) => {
                        if (idx === replyIndex) {
                            const userLikeId = userId.substring(0, 8);
                            if (reply.likes.includes(userLikeId)) {
                                // Unlike
                                return { ...reply, likes: reply.likes.filter(id => id !== userLikeId) };
                            } else {
                                // Like
                                return { ...reply, likes: [...reply.likes, userLikeId] };
                            }
                        }
                        return reply;
                    });
                    return { ...post, replies: updatedReplies };
                }
                return post;
            })
        );
    };

    const handleLikePost = (postId) => {
        setFilteredCommunityReads(prevReads =>
            prevReads.map(post => {
                if (post.id === postId) {
                    const userLikeId = userId.substring(0, 8);
                    if (post.likes.includes(userLikeId)) {
                        // Unlike the post
                        return { ...post, likes: post.likes.filter(id => id !== userLikeId) };
                    } else {
                        // Like the post
                        return { ...post, likes: [...post.likes, userLikeId] };
                    }
                }
                return post;
            })
        );
    };

    const handleSharePost = (post) => {
        const postText = `Check out what ${post.name} is reading: "${post.currentRead}"! Note: ${post.note || 'No additional note.'}`;
        const postLink = `https://beyondpages.app/community/post/${post.id}`; // Mock link
        setSelectedPostForShare({ text: postText, link: postLink });
        setShowShareModal(true);
    };

    const handleFollowToggle = async (targetUserId) => {
        if (!db || !userId) {
            setMessage("Authentication error. Please refresh.");
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        const profileDocRef = doc(db, `artifacts/${appId}/users/${userId}/profile`, 'userProfile');

        try {
            if (currentUserFollowing.includes(targetUserId)) {
                await updateDoc(profileDocRef, {
                    following: arrayRemove(targetUserId)
                });
                setCurrentUserFollowing(prev => prev.filter(id => id !== targetUserId));
                setMessage(`You have unfollowed ${targetUserId}.`);
            } else {
                await updateDoc(profileDocRef, {
                    following: arrayUnion(targetUserId)
                });
                setCurrentUserFollowing(prev => [...prev, targetUserId]);
                setMessage(`You are now following ${targetUserId}!`);
            }
            setTimeout(() => setMessage(''), 2000); // Clear message after a while
        } catch (error) {
            console.error("Error updating following status:", error);
            setMessage("Failed to update follow status. Please try again.");
            setTimeout(() => setMessage(''), 3000);
        }
    };

    return (
        <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 max-w-2xl mx-auto mt-8">
            <h2 className="text-2xl font-semibold text-blue-600 dark:text-blue-400 mb-6 text-center">Community</h2>
            <p className="text-gray-700 dark:text-gray-300 mb-4 text-center">
                Connect with other readers, share your thoughts, and discover exciting events!
            </p>

            {message && (
                <p className={`mt-4 text-center ${message.includes('success') || message.includes('unfollowed') || message.includes('now following') ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
                    {message}
                </p>
            )}

            <h3 className="text-xl font-medium text-gray-900 dark:text-white mb-4 mt-6">What people are reading:</h3>
            {filteredCommunityReads.length === 0 ? (
                <p className="text-gray-500 dark:text-gray-400 text-center">
                    No public posts from people you follow or who share your reading interests.
                </p>
            ) : (
                <ul className="space-y-6">
                    {filteredCommunityReads.map((readerPost) => (
                        <li key={readerPost.id} className="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg shadow-sm">
                            <h4 className="text-lg font-medium text-gray-900 dark:text-white">{readerPost.name}</h4>
                            <p className="text-md text-gray-600 dark:text-gray-300">Currently reading: "<span className="font-semibold">{readerPost.currentRead}</span>"</p>
                            {readerPost.note && (
                                <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
                                    <span className="font-semibold">Note:</span> {readerPost.note}
                                </p>
                            )}

                            <div className="flex items-center justify-between mt-4 pt-3 border-t border-gray-200 dark:border-gray-600">
                                <div className="flex items-center gap-2">
                                    {/* Like button */}
                                    <button
                                        onClick={() => handleLikePost(readerPost.id)}
                                        className="flex items-center gap-1 p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-500 transition-colors duration-200"
                                        aria-label={readerPost.likes.includes(userId.substring(0, 8)) ? "Unlike Post" : "Like Post"}
                                    >
                                        <svg
                                            className={`w-5 h-5 ${readerPost.likes.includes(userId.substring(0, 8)) ? 'text-red-500' : 'text-gray-400 dark:text-gray-300'}`}
                                            fill="currentColor"
                                            viewBox="0 0 24 24"
                                            xmlns="http://www.w3.org/2000/svg"
                                        >
                                            <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                                        </svg>
                                        <span className="text-xs">{readerPost.likes.length}</span>
                                    </button>
                                    {/* Share button */}
                                    <button
                                        onClick={() => handleSharePost(readerPost)}
                                        className="flex items-center gap-1 p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-500 transition-colors duration-200"
                                        aria-label="Share Post"
                                    >
                                        <svg className="w-5 h-5 text-gray-500 dark:text-gray-300" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M2.01 21L23 12 2.01 3v8.01L17 12l-14.99 1.01z"/>
                                        </svg>
                                    </button>
                                </div>
                                {/* Follow button */}
                                <button
                                    onClick={() => handleFollowToggle(readerPost.id)}
                                    className={`px-3 py-1 rounded-md text-xs font-semibold transition-colors duration-200
                                        ${currentUserFollowing.includes(readerPost.id)
                                            ? 'bg-gray-300 text-gray-800 hover:bg-gray-400'
                                            : 'bg-green-500 text-white hover:bg-green-600'
                                        }`}
                                >
                                    {currentUserFollowing.includes(readerPost.id) ? 'Following' : 'Follow'}
                                </button>
                            </div>

                            {/* Replies Section */}
                            {readerPost.replies.length > 0 && (
                                <div className="mt-4 pt-3 border-t border-gray-200 dark:border-gray-600">
                                    <h5 className="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Replies:</h5>
                                    <ul className="space-y-2">
                                        {readerPost.replies.map((reply, idx) => (
                                            <ReplyItem
                                                key={idx}
                                                reply={reply}
                                                postId={readerPost.id}
                                                replyIndex={idx}
                                                onLike={handleLikeReply}
                                                currentUser={userId.substring(0, 8)}
                                            />
                                        ))}
                                    </ul>
                                </div>
                            )}

                            {/* Reply Input */}
                            <ReplyInput postId={readerPost.id} onReply={handleReply} currentUser={userId.substring(0, 8)} onGainXP={onGainXP} />
                        </li>
                    ))}
                </ul>
            )}
            <p className="mt-6 text-center text-gray-500 dark:text-gray-400 text-sm">
                (Note: Community reads are simulated based on your following list and shared reading interests. "Follow" functionality updates your profile in Firestore.)
            </p>

            {/* Share Modal */}
            {showShareModal && selectedPostForShare && (
                <ShareModal
                    isOpen={showShareModal}
                    onClose={() => setShowShareModal(false)}
                    postText={selectedPostForShare.text}
                    postLink={selectedPostForShare.link}
                />
            )}
        </div>
    );
};

// BookGroupCard Component (used by BookGroupsList)
const BookGroupCard = ({ group }) => {
    return (
        <li className="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg shadow-sm flex flex-col">
            <h4 className="text-lg font-medium text-gray-900 dark:text-white">{group.name}</h4>
            <p className="text-sm text-gray-600 dark:text-gray-300">
                <span className="font-semibold">Type:</span> {group.type}
            </p>
            <p className="text-sm text-gray-600 dark:text-gray-300">
                <span className="font-semibold">Focus:</span> {group.focus}
            </p>
            <p className="text-sm text-gray-600 dark:text-gray-300">
                <span className="font-semibold">Meeting:</span> {group.meeting}
            </p>
            <div className="mt-3 pt-2 border-t border-gray-200 dark:border-gray-600">
                <button
                    onClick={() => alert(`In a real app, you would connect with ${group.contact} for ${group.name} group!`)}
                    className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white font-bold rounded-lg shadow-md transition-all duration-300 ease-in-out text-sm"
                >
                    Connect
                </button>
            </div>
        </li>
    );
};

// BookGroupsList Component (used by App)
const BookGroupsList = ({ userId }) => {
    const [activeSubTab, setActiveSubTab] = useState('city-groups'); // 'city-groups' or 'membership'

    const [bookGroups, setBookGroups] = useState([
        { id: 'bg1', name: 'Sci-Fi Explorers', type: 'Virtual', focus: 'Classic and modern sci-fi novels', meeting: 'Every Tuesday, 8 PM IST (Google Meet)', contact: 'scifiexplorers@email.com' },
        { id: 'bg2', name: 'Mystery & Thriller Club', type: 'Offline', focus: 'Monthly mystery novel discussions', meeting: 'Last Saturday of month, 2 PM at Central Cafe', contact: 'mysterythriller@email.com' },
        { id: 'bg3', name: 'Fantasy Realm Readers', type: 'Virtual', focus: 'High fantasy and urban fantasy series', meeting: 'Bi-weekly, Sundays 6 PM IST (Zoom)', contact: 'fantasyreaders@email.com' },
        { id: 'bg4', name: 'Historical Fiction Circle', type: 'Offline', date: 'August 1, 2025', time: '6:00 PM IST', location: 'The Coffee House', host: 'You (Host)', rsvps: [], claimedXP: false },
    ]);

    // Mock data for user's memberships
    const [myMemberships, setMyMemberships] = useState([
        { id: 'mybg1', name: 'Sci-Fi Explorers', type: 'Virtual', focus: 'Classic and modern sci-fi novels', meeting: 'Every Tuesday, 8 PM IST (Google Meet)', contact: 'scifiexplorers@email.com' },
        { id: 'mybg2', name: 'Mystery & Thriller Club', type: 'Offline', focus: 'Monthly mystery novel discussions', meeting: 'Last Saturday of month, 2 PM at Central Cafe', contact: 'mysterythriller@email.com' },
    ]);

    return (
        <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 max-w-4xl mx-auto mt-8 flex flex-col md:flex-row gap-6">
            {/* Vertical Navigation for Groups */}
            <div className="md:w-1/4 bg-gray-50 dark:bg-gray-700 p-4 rounded-xl shadow-inner border border-gray-200 dark:border-gray-600">
                <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 border-b pb-2 border-gray-200 dark:border-gray-600">Group Categories</h3>
                <ul className="space-y-2">
                    <li>
                        <button
                            onClick={() => setActiveSubTab('city-groups')}
                            className={`w-full text-left px-4 py-2 rounded-lg transition-colors duration-200
                                ${activeSubTab === 'city-groups'
                                    ? 'bg-blue-500 text-white shadow-md'
                                    : 'bg-gray-100 dark:bg-gray-600 text-gray-800 dark:text-gray-200 hover:bg-blue-100 dark:hover:bg-gray-500'
                                }`}
                        >
                            Groups in the City
                        </button>
                    </li>
                    <li>
                        <button
                            onClick={() => setActiveSubTab('membership')}
                            className={`w-full text-left px-4 py-2 rounded-lg transition-colors duration-200
                                ${activeSubTab === 'membership'
                                    ? 'bg-blue-500 text-white shadow-md'
                                    : 'bg-gray-100 dark:bg-gray-600 text-gray-800 dark:text-gray-200 hover:bg-blue-100 dark:hover:bg-gray-500'
                                }`}
                        >
                            Membership
                        </button>
                    </li>
                </ul>
            </div>

            {/* Group Content Area */}
            <div className="md:w-3/4">
                <h2 className="text-2xl font-semibold text-blue-600 dark:text-blue-400 mb-6 text-center">
                    {activeSubTab === 'city-groups' ? 'Explore Book Groups' : 'Your Memberships'}
                </h2>
                <p className="text-gray-700 dark:text-gray-300 mb-4 text-center">
                    {activeSubTab === 'city-groups'
                        ? 'Discover book groups near you or online.'
                        : 'These are the book groups you are currently a member of.'
                    }
                </p>
                {activeSubTab === 'city-groups' && (
                    bookGroups.length === 0 ? (
                        <p className="text-gray-500 dark:text-gray-400">No book groups found yet.</p>
                    ) : (
                        <ul className="space-y-6">
                            {bookGroups.map((group) => (
                                <BookGroupCard key={group.id} group={group} />
                            ))}
                        </ul>
                    )
                )}
                {activeSubTab === 'membership' && (
                    myMemberships.length === 0 ? (
                        <p className="text-gray-500 dark:text-gray-400">You are not a member of any groups yet.</p>
                    ) : (
                        <ul className="space-y-6">
                            {myMemberships.map((group) => (
                                <BookGroupCard key={group.id} group={group} />
                            ))}
                        </ul>
                    )
                )}
                <p className="mt-6 text-center text-gray-500 dark:text-gray-400 text-sm">
                    (Note: Book groups and memberships are static examples. In a full application, this would display real-time data from a database and allow interaction.)
                </p>
            </div>
        </div>
    );
};

// EventCard Component (used by EventsList)
const EventCard = ({ event, onRsvp, currentUser, onClaimHostXP, isHost }) => {
    const isRsvpd = event.rsvps.includes(currentUser);

    return (
        <li className="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg shadow-sm flex flex-col">
            <h4 className="text-lg font-medium text-gray-900 dark:text-white">{event.title}</h4>
            <p className="text-sm text-gray-600 dark:text-gray-300">
                <span className="font-semibold">Type:</span> {event.type}
            </p>
            <p className="text-sm text-gray-600 dark:text-gray-300">
                <span className="font-semibold">When:</span> {event.date} at {event.time}
            </p>
            {event.type === 'Offline' && (
                <p className="text-sm text-gray-600 dark:text-gray-300">
                    <span className="font-semibold">Where:</span> {event.location}
                </p>
            )}
            {event.type === 'Virtual' && (
                <p className="text-sm text-gray-600 dark:text-gray-300">
                    <span className="font-semibold">Link:</span> <a href={event.link} target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline">{event.link}</a>
                </p>
            )}
            <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">
                <span className="font-semibold">Host:</span> {event.host}
            </p>

            <div className="flex items-center gap-3 mt-4 pt-3 border-t border-gray-200 dark:border-gray-600">
                <button
                    onClick={() => alert(`In a real app, you would connect with ${event.host} here!`)} // Using alert for demo, replace with modal/chat
                    className="px-4 py-2 bg-gray-300 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-400 dark:hover:bg-gray-500 transition-colors duration-200 shadow-sm text-sm"
                >
                    Connect with Host
                </button>
                {!isHost ? ( // Only show RSVP if not hosting
                    <button
                        onClick={() => onRsvp(event.id)}
                        className={`px-4 py-2 rounded-lg transition-colors duration-200 shadow-sm text-sm
                            ${isRsvpd
                                ? 'bg-green-500 text-white hover:bg-green-600'
                                : 'bg-blue-500 text-white hover:bg-blue-600'
                            }`}
                    >
                        {isRsvpd ? 'RSVP\'d' : 'RSVP'} ({event.rsvps.length})
                    </button>
                ) : ( // Show Claim Host XP if hosting
                    <button
                        onClick={() => onClaimHostXP(event.id)}
                        className={`px-4 py-2 rounded-lg transition-colors duration-200 shadow-sm text-sm
                            ${event.claimedHostXP
                                ? 'bg-gray-400 text-gray-700 cursor-not-allowed'
                                : 'bg-indigo-500 text-white hover:bg-indigo-600'
                            }`}
                        disabled={event.claimedHostXP}
                    >
                        {event.claimedXP ? 'XP Claimed!' : 'Claim Host XP (20)'}
                    </button>
                )}
            </div>
            {event.rsvps.length > 0 && (
                <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                    RSVP'd by: {event.rsvps.join(', ')}
                </p>
            )}
        </li>
    );
};

// EventsList Component (used by App)
const EventsList = ({ userId, onGainXP }) => {
    const [events, setEvents] = useState([
        { id: 'e1', title: 'Virtual Book Club: "Project Hail Mary"', type: 'Virtual', date: 'July 15, 2025', time: '7:00 PM IST', link: 'https://meet.google.com/abc-defg-hij', host: 'Bookworms Unite', rsvps: [], claimedXP: false },
        { id: 'e2', title: 'Local Author Meet & Greet: Jane Doe', type: 'Offline', date: 'July 20, 2025', time: '3:00 PM IST', location: 'City Library Auditorium', host: 'You (Host)', rsvps: [], claimedXP: false }, // Mocked host
        { id: 'e3', title: 'Fantasy Book Discussion: "Fourth Wing"', type: 'Virtual', date: 'July 25, 2025', time: '8:00 PM IST', link: 'https://zoom.us/xyz-123-456', host: 'Dragon Readers', rsvps: [], claimedXP: false },
        { id: 'e4', title: 'Poetry Slam Night', type: 'Offline', date: 'August 1, 2025', time: '6:00 PM IST', location: 'The Coffee House', host: 'You (Host)', rsvps: [], claimedXP: false }, // Another mocked host
    ]);
    const [activeEventSubTab, setActiveEventSubTab] = useState('registered'); // 'registered' or 'my-events'

    const handleRsvp = (eventId) => {
        setEvents(prevEvents =>
            prevEvents.map(event => {
                if (event.id === eventId) {
                    const userRsvpId = userId.substring(0, 8);
                    if (event.rsvps.includes(userRsvpId)) {
                        // User already RSVP'd, so un-RSVP
                        return { ...event, rsvps: event.rsvps.filter(id => id !== userRsvpId) };
                    } else {
                        // User not RSVP'd, so RSVP
                        return { ...event, rsvps: [...event.rsvps, userRsvpId] };
                    }
                }
                return event;
            })
        );
    };

    const handleClaimHostXP = (eventId) => {
        setEvents(prevEvents =>
            prevEvents.map(event => {
                if (event.id === eventId && !event.claimedXP) {
                    onGainXP(20, event.id); // Award 20 XP for hosting an event, pass eventId to track
                    return { ...event, claimedXP: true };
                }
                return event;
            })
        );
    };

    const registeredEvents = events.filter(event => event.rsvps.includes(userId.substring(0, 8)));
    const myHostedEvents = events.filter(event => event.host === 'You (Host)'); // Mocked condition for hosted events

    return (
        <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 max-w-4xl mx-auto mt-8 flex flex-col md:flex-row gap-6">
            {/* Vertical Navigation for Events */}
            <div className="md:w-1/4 bg-gray-50 dark:bg-gray-700 p-4 rounded-xl shadow-inner border border-gray-200 dark:border-gray-600">
                <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 border-b pb-2 border-gray-200 dark:border-gray-600">Event Categories</h3>
                <ul className="space-y-2">
                    <li>
                        <button
                            onClick={() => setActiveEventSubTab('registered')}
                            className={`w-full text-left px-4 py-2 rounded-lg transition-colors duration-200
                                ${activeEventSubTab === 'registered'
                                    ? 'bg-blue-500 text-white shadow-md'
                                    : 'bg-gray-100 dark:bg-gray-600 text-gray-800 dark:text-gray-200 hover:bg-blue-100 dark:hover:bg-gray-500'
                                }`}
                        >
                            Registered
                        </button>
                    </li>
                    <li>
                        <button
                            onClick={() => setActiveEventSubTab('my-events')}
                            className={`w-full text-left px-4 py-2 rounded-lg transition-colors duration-200
                                ${activeEventSubTab === 'my-events'
                                    ? 'bg-blue-500 text-white shadow-md'
                                    : 'bg-gray-100 dark:bg-gray-600 text-gray-800 dark:text-gray-200 hover:bg-blue-100 dark:hover:bg-gray-500'
                                }`}
                        >
                            Hosting
                        </button>
                    </li>
                </ul>
            </div>

            {/* Event Content Area */}
            <div className="md:w-3/4">
                <h2 className="text-2xl font-semibold text-blue-600 dark:text-blue-400 mb-6 text-center">
                    {activeEventSubTab === 'registered' ? 'Your Registered Events' : 'Events You Are Hosting'}
                </h2>
                <p className="text-gray-700 dark:text-gray-300 mb-4 text-center">
                    {activeEventSubTab === 'registered'
                        ? 'Here are the events you have RSVP\'d for.'
                        : 'These are the events where you are listed as a host.'
                    }
                </p>
                {activeEventSubTab === 'registered' && (
                    registeredEvents.length === 0 ? (
                        <p className="text-gray-500 dark:text-gray-400">You haven't registered for any events yet.</p>
                    ) : (
                        <ul className="space-y-6">
                            {registeredEvents.map((event) => (
                                <EventCard key={event.id} event={event} onRsvp={handleRsvp} currentUser={userId.substring(0, 8)} isHost={false} />
                            ))}
                        </ul>
                    )
                )}
                {activeEventSubTab === 'my-events' && (
                    myHostedEvents.length === 0 ? (
                        <p className="text-gray-500 dark:text-gray-400">You are not currently hosting any events.</p>
                    ) : (
                        <ul className="space-y-6">
                            {myHostedEvents.map((event) => (
                                <EventCard key={event.id} event={event} onRsvp={handleRsvp} currentUser={userId.substring(0, 8)} onClaimHostXP={handleClaimHostXP} isHost={true} />
                            ))}
                        </ul>
                    )
                )}
                <p className="mt-6 text-center text-gray-500 dark:text-gray-400 text-sm">
                    (Note: Events are static examples. In a full application, events would be fetched from and persisted in Firestore. "My Events" is mocked based on the host name "You (Host)".)
                </p>
            </div>
        </div>
    );
};

// Profile Component
const Profile = forwardRef(({ db, userId, setCurrentUserFollowing }, ref) => {
    const [bio, setBio] = useState('');
    const [facebook, setFacebook] = useState('');
    const [twitter, setTwitter] = useState('');
    const [linkedin, setLinkedin] = useState('');
    const defaultProfilePic = 'https://placehold.co/150x150/aabbcc/ffffff?text=Profile';
    const [profilePicUrl, setProfilePicUrl] = useState(defaultProfilePic);
    const [loading, setLoading] = useState(true);
    const [message, setMessage] = useState('');
    const [isSaving, setIsSaving] = useState(false);
    const fileInputRef = useRef(null); // Ref for the file input

    // Gamification states
    const [xp, setXP] = useState(0); // Changed from points to XP
    const [level, setLevel] = useState(1);
    const [claimedEventXP, setClaimedEventXP] = useState({}); // Track claimed XP for events

    // New states for following/followers (mock data for now)
    const [following, setFollowing] = useState([]); // Initialize as empty array
    const [followers, setFollowers] = useState(['userX', 'userY']); // Still mock for now

    // New state for profile privacy
    const [isProfilePublic, setIsProfilePublic] = useState(true);

    // New state for user's favorite genres
    const [userGenres, setUserGenres] = useState({}); // Stores genre counts: { "Fantasy": 5, "Sci-Fi": 3 }

    // New state for badges
    const [badges, setBadges] = useState([]);


    // Expose handleGainXP to parent component via ref
    useImperativeHandle(ref, () => ({
        handleGainXP,
    }));

    // Function to calculate level based on XP
    const calculateLevel = (currentXP) => {
        let currentLevel = 1;
        let xpNeededForNext = 50;

        while (currentXP >= xpNeededForNext) {
            currentLevel++;
            xpNeededForNext += 20; // Levels increment by 20 XP after first level
        }
        return { currentLevel, xpNeededForNext };
    };

    // Function to calculate and assign badges
    const calculateBadges = (genresCount) => {
        const newBadges = [];
        // Example: "Motivation Reader" badge for reading 3 or more Self-Help books
        if (genresCount['Self-Help'] && genresCount['Self-Help'] >= 3) {
            newBadges.push({ name: 'Motivation Reader', icon: '✨', description: 'Read 3+ Self-Help books' });
        }
        // Add more badge logic here as needed
        if (genresCount['Fantasy'] && genresCount['Fantasy'] >= 5) {
            newBadges.push({ name: 'Fantasy Fanatic', icon: '🐉', description: 'Read 5+ Fantasy books' });
        }
        if (genresCount['Mystery'] && genresCount['Mystery'] >= 3) {
            newBadges.push({ name: 'Mystery Maven', icon: '🕵️‍♀️', description: 'Read 3+ Mystery books' });
        }
        setBadges(newBadges);
    };

    useEffect(() => {
        const fetchProfileAndBooks = async () => {
            if (!db || !userId) return;
            setLoading(true);
            try {
                const profileDocRef = doc(db, `artifacts/${appId}/users/${userId}/profile`, 'userProfile');
                const docSnap = await getDoc(profileDocRef);

                if (docSnap.exists()) {
                    const data = docSnap.data();
                    setBio(data.bio || '');
                    setFacebook(data.socialMediaLinks?.facebook || '');
                    setTwitter(data.socialMediaLinks?.twitter || '');
                    setLinkedin(data.socialMediaLinks?.linkedin || '');
                    setProfilePicUrl(data.profilePicUrl || defaultProfilePic);
                    setXP(data.xp || 0); // Changed from points to xp
                    setLevel(data.level || 1);
                    setClaimedEventXP(data.claimedEventXP || {}); // Changed from claimedEventPoints to claimedEventXP
                    setFollowing(data.following || []); // Load following
                    setFollowers(data.followers || []); // Load followers
                    setIsProfilePublic(data.isProfilePublic !== undefined ? data.isProfilePublic : true); // Load privacy setting
                } else {
                    // Initialize profile with default gamification values if it doesn't exist
                    const initialFollowing = [];
                    await setDoc(profileDocRef, {
                        bio: '',
                        socialMediaLinks: { facebook: '', twitter: '', linkedin: '' },
                        profilePicUrl: defaultProfilePic,
                        xp: 0, // Changed from points to xp
                        level: 1,
                        claimedEventXP: {}, // Changed from claimedEventPoints to claimedEventXP
                        following: initialFollowing, // Initialize following
                        followers: ['userX', 'userY'], // Initialize mock data
                        isProfilePublic: true, // Default to public
                        createdAt: new Date().toISOString()
                    });
                    // Update App's state for following as well
                    if (setCurrentUserFollowing) {
                        setCurrentUserFollowing(initialFollowing);
                    }
                }

                // Fetch user's books to determine genres
                const booksCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/books`);
                const booksQuery = query(booksCollectionRef); // No orderBy to avoid index issues
                const booksSnapshot = await getDocs(booksQuery);
                const genresCount = {};
                booksSnapshot.forEach((bookDoc) => {
                    const bookData = bookDoc.data();
                    if (bookData.genres && Array.isArray(bookData.genres)) {
                        bookData.genres.forEach(genre => {
                            // Normalize genre names (e.g., "Self-Help & Psychology" to "Self-Help")
                            const normalizedGenre = COMMON_GENRES.find(g => genre.includes(g)) || genre;
                            genresCount[normalizedGenre] = (genresCount[normalizedGenre] || 0) + 1;
                        });
                    }
                });
                setUserGenres(genresCount);
                calculateBadges(genresCount); // Calculate badges after genres are counted

            } catch (error) {
                console.error("Error fetching profile or books:", error);
                setMessage('Error loading profile. Please try again.');
            } finally {
                setLoading(false);
            }
        };

        fetchProfileAndBooks();
    }, [db, userId, setCurrentUserFollowing]); // Added setCurrentUserFollowing to dependency array

    // Function to gain XP
    const handleGainXP = async (xpToAdd, eventId = null) => {
        if (!db || !userId) {
            console.error("Firestore or User ID not available for gaining XP.");
            return;
        }

        const profileDocRef = doc(db, `artifacts/${appId}/users/${userId}/profile`, 'userProfile');

        try {
            // Fetch current XP to ensure atomic update if multiple actions happen quickly
            const docSnap = await getDoc(profileDocRef);
            let currentXP = docSnap.exists() ? docSnap.data().xp || 0 : 0; // Changed from points to xp
            let currentLevel = docSnap.exists() ? docSnap.data().level || 1 : 1;
            let currentClaimedEventXP = docSnap.exists() ? docSnap.data().claimedEventXP || {} : {}; // Changed from claimedEventPoints to claimedEventXP

            if (eventId && currentClaimedEventXP[eventId]) {
                // XP for this event already claimed, do not add again
                console.log(`XP for event ${eventId} already claimed.`);
                return;
            }

            const newXP = currentXP + xpToAdd; // Changed from points to xp
            const { currentLevel: newLevel } = calculateLevel(newXP);

            const updateData = { xp: newXP, level: newLevel }; // Changed from points to xp
            if (eventId) {
                currentClaimedEventXP[eventId] = true;
                updateData.claimedEventXP = currentClaimedEventXP; // Changed from claimedEventPoints to claimedEventXP
            }

            await updateDoc(profileDocRef, updateData);

            setXP(newXP); // Changed from points to xp
            setLevel(newLevel);
            if (eventId) {
                setClaimedEventXP(currentClaimedEventXP); // Changed from claimedEventPoints to claimedEventXP
            }
            setMessage(`+${xpToAdd} XP! Total: ${newXP}`); // Changed from points to XP
            setTimeout(() => setMessage(''), 2000);
        } catch (error) {
            console.error("Error updating XP:", error); // Changed from points to XP
            setMessage('Error gaining XP. Please try again.'); // Changed from points to XP
        }
    };


    const handleFileChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setMessage('Simulating upload... (In a real app, this would upload to Firebase Storage)');
            const reader = new FileReader();
            reader.onloadend = () => {
                setProfilePicUrl(reader.result); // Show selected image immediately
            };
            reader.readAsDataURL(file);

            setTimeout(() => {
                setMessage('Image "uploaded" successfully!');
                setTimeout(() => setMessage(''), 3000);
            }, 2000);
        } else {
            setProfilePicUrl(defaultProfilePic);
            setMessage('');
        }
    };

    const handleRemovePicture = async () => {
        if (!db || !userId) {
            setMessage('Authentication error. Please refresh.');
            return;
        }
        setIsSaving(true);
        setMessage('');
        try {
            const profileDocRef = doc(db, `artifacts/${appId}/users/${userId}/profile`, 'userProfile');
            await updateDoc(profileDocRef, { profilePicUrl: defaultProfilePic });
            setProfilePicUrl(defaultProfilePic);
            setMessage('Profile picture removed successfully!');
        } catch (error) {
            console.error("Error removing profile picture:", error);
            setMessage('Error removing profile picture. Please try again.');
        } finally {
            setIsSaving(false);
            setTimeout(() => setMessage(''), 3000);
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!db || !userId) {
            setMessage('Authentication error. Please refresh.');
            return;
        }

        setIsSaving(true);
        setMessage('');

        try {
            const profileDocRef = doc(db, `artifacts/${appId}/users/${userId}/profile`, 'userProfile');
            await setDoc(profileDocRef, {
                bio,
                socialMediaLinks: {
                    facebook,
                    twitter,
                    linkedin,
                },
                profilePicUrl,
                xp, // Save current XP
                level, // Save current level
                claimedEventXP, // Save claimed event XP
                following, // Save following data
                followers, // Save followers data
                isProfilePublic, // Save the new field
                updatedAt: new Date().toISOString(),
            }, { merge: true });
            setMessage('Profile updated successfully!');
        } catch (error) {
            console.error("Error saving profile:", error);
            setMessage('Error saving profile. Please try again.');
        } finally {
            setIsSaving(false);
            setTimeout(() => setMessage(''), 3000);
        }
    };

    if (loading) {
        return <div className="text-center py-8 text-gray-600 dark:text-gray-400">Loading profile...</div>;
    }

    const isDefaultPic = profilePicUrl === defaultProfilePic;
    const { currentLevel, xpNeededForNext } = calculateLevel(xp); // Changed from points to xp
    const progressPercentage = (xp / xpNeededForNext) * 100; // Changed from points to xp

    // Sort genres by count and get top 5
    const sortedGenres = Object.entries(userGenres)
        .sort(([, countA], [, countB]) => countB - countA)
        .slice(0, 5); // Get top 5 genres


    return (
        <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 max-w-2xl mx-auto mt-8">
            <h2 className="text-2xl font-semibold text-blue-600 dark:text-blue-400 mb-6 text-center">About Me</h2>
            <form onSubmit={handleSubmit} className="space-y-6">
                {/* Profile Picture */}
                <div className="flex flex-col items-center gap-4">
                    <img
                        src={profilePicUrl}
                        alt="Profile"
                        className="w-32 h-32 rounded-full object-cover border-4 border-blue-400 shadow-md"
                        onError={(e) => {
                            e.target.onerror = null;
                            e.target.src = defaultProfilePic; // Fallback image
                        }}
                    />
                    <div className="flex gap-4">
                        <button
                            type="button"
                            onClick={() => fileInputRef.current.click()}
                            className="p-3 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition-colors duration-200 shadow-md flex items-center justify-center"
                            aria-label="Change Profile Picture"
                        >
                            <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M20 5h-3.17L15 3H9L7.17 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-8 13c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                            </svg>
                        </button>
                        {!isDefaultPic && (
                            <button
                                type="button"
                                onClick={handleRemovePicture}
                                className="p-3 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors duration-200 shadow-md flex items-center justify-center"
                                aria-label="Remove Profile Picture"
                            >
                                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                                </svg>
                            </button>
                        )}
                    </div>
                    <input
                        type="file"
                        accept="image/*"
                        ref={fileInputRef}
                        onChange={handleFileChange}
                        className="hidden" // Hide the actual file input
                    />
                </div>

                {/* Gamification Bar */}
                <div className="bg-gray-100 dark:bg-gray-700 p-4 rounded-lg shadow-inner border border-gray-200 dark:border-gray-600">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Community Journey</h3>
                    <p className="text-sm text-gray-700 dark:text-gray-300">
                        Level: <span className="font-bold text-blue-600 dark:text-blue-400">{currentLevel}</span>
                        <span className="ml-4">League: <span className="font-bold text-purple-600 dark:text-purple-400">{getLeagueInfo(currentLevel).name}</span></span>
                    </p>
                    <p className="text-sm text-gray-700 dark:text-gray-300 mb-2">
                        XP: <span className="font-bold text-green-600 dark:text-green-400">{xp}</span> / {xpNeededForNext}
                    </p>
                    <div className="w-full bg-gray-300 dark:bg-gray-600 rounded-full h-2.5">
                        <div
                            className="bg-gradient-to-r from-blue-400 to-blue-600 h-2.5 rounded-full transition-all duration-500 ease-out"
                            style={{ width: `${Math.min(progressPercentage, 100)}%` }}
                        ></div>
                    </div>
                    {currentLevel === 1 && xp < 50 && (
                        <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                            Keep going! Reach 50 XP to unlock Level 1.
                        </p>
                    )}
                    {currentLevel > 1 && (
                        <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                            Next level at {xpNeededForNext} XP.
                        </p>
                    )}

                    {/* Badges Section */}
                    <div className="mt-6 pt-4 border-t border-gray-300 dark:border-gray-600">
                        <h4 className="text-md font-semibold text-gray-900 dark:text-white mb-2">My Badges</h4>
                        {badges.length === 0 ? (
                            <p className="text-sm text-gray-500 dark:text-gray-400">No badges earned yet. Keep reading!</p>
                        ) : (
                            <div className="flex flex-wrap gap-3">
                                {badges.map((badge, index) => (
                                    <div key={index} className="flex items-center gap-2 bg-blue-50 dark:bg-blue-900 px-3 py-1 rounded-full shadow-sm">
                                        <span className="text-lg">{badge.icon}</span>
                                        <span className="text-sm font-medium text-blue-800 dark:text-blue-100">{badge.name}</span>
                                        {badge.description && (
                                            <span className="text-xs text-blue-600 dark:text-blue-200 hidden sm:inline-block">({badge.description})</span>
                                        )}
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>

                    {/* Following / Followers Section */}
                    <div className="mt-6 pt-4 border-t border-gray-300 dark:border-gray-600 flex flex-col sm:flex-row gap-4">
                        <div className="flex-1">
                            <h4 className="text-md font-semibold text-gray-900 dark:text-white mb-2">Following ({following.length})</h4>
                            {following.length === 0 ? (
                                <p className="text-sm text-gray-500 dark:text-gray-400">Not following anyone yet.</p>
                            ) : (
                                <ul className="list-disc list-inside text-sm text-gray-700 dark:text-gray-300">
                                    {following.map((f, index) => (
                                        <li key={index}>{f}</li>
                                    ))}
                                </ul>
                            )}
                        </div>
                        <div className="flex-1">
                            <h4 className="text-md font-semibold text-gray-900 dark:text-white mb-2">Followers ({followers.length})</h4>
                            {followers.length === 0 ? (
                                <p className="text-sm text-gray-500 dark:text-gray-400">No followers yet.</p>
                            ) : (
                                <ul className="list-disc list-inside text-sm text-gray-700 dark:text-gray-300">
                                    {followers.map((f, index) => (
                                        <li key={index}>{f}</li>
                                    ))}
                                </ul>
                            )}
                        </div>
                    </div>
                </div>

                {/* My Favorite Genres Section */}
                <div className="bg-gray-100 dark:bg-gray-700 p-4 rounded-lg shadow-inner border border-gray-200 dark:border-gray-600">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">My Favorite Genres</h3>
                    {sortedGenres.length === 0 ? (
                        <p className="text-sm text-gray-500 dark:text-gray-400">Add some books to see your favorite genres!</p>
                    ) : (
                        <div className="flex flex-wrap gap-2">
                            {sortedGenres.map(([genre, count]) => (
                                <span
                                    key={genre}
                                    className="px-3 py-1 bg-purple-100 dark:bg-purple-800 text-purple-800 dark:text-purple-200 rounded-full text-sm font-medium shadow-sm"
                                >
                                    {genre} ({count})
                                </span>
                            ))}
                        </div>
                    )}
                    <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                        (Based on genres of books you've added.)
                    </p>
                </div>

                {/* Profile Privacy Toggle */}
                <div className="bg-gray-100 dark:bg-gray-700 p-4 rounded-lg shadow-inner border border-gray-200 dark:border-gray-600">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Profile Privacy</h3>
                    <label className="flex items-center cursor-pointer">
                        <div className="relative">
                            <input
                                type="checkbox"
                                className="sr-only"
                                checked={isProfilePublic}
                                onChange={(e) => setIsProfilePublic(e.target.checked)}
                            />
                            <div className="block bg-gray-600 w-14 h-8 rounded-full"></div>
                            <div className="dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition"></div>
                        </div>
                        <div className="ml-3 text-gray-700 dark:text-gray-300 font-medium">
                            {isProfilePublic ? 'Public Profile (Visible to others)' : 'Private Profile (Only visible to you)'}
                        </div>
                    </label>
                    <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                        When your profile is public, other users can see your reading activity and profile details.
                    </p>
                </div>

                {/* Bio */}
                <div>
                    <label htmlFor="bio" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        About Me
                    </label>
                    <textarea
                        id="bio"
                        value={bio}
                        onChange={(e) => setBio(e.target.value)}
                        rows="4"
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white"
                        placeholder="Tell us about yourself..."
                    ></textarea>
                </div>

                {/* Social Media Links */}
                <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white border-b pb-2 border-gray-200 dark:border-gray-700">Social Media</h3>
                    <div>
                        <label htmlFor="facebook" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Facebook URL
                        </label>
                        <input
                            type="url"
                            id="facebook"
                            value={facebook}
                            onChange={(e) => setFacebook(e.target.value)}
                            className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white"
                            placeholder="e.g., https://facebook.com/yourprofile"
                        />
                    </div>
                    <div>
                        <label htmlFor="twitter" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Twitter URL
                        </label>
                        <input
                            type="url"
                            id="twitter"
                            value={twitter}
                            onChange={(e) => setTwitter(e.target.value)}
                            className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white"
                            placeholder="e.g., https://twitter.com/yourprofile"
                        />
                    </div>
                    <div>
                        <label htmlFor="linkedin" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            LinkedIn URL
                        </label>
                        <input
                            type="url"
                            id="linkedin"
                            value={linkedin}
                            onChange={(e) => setLinkedin(e.target.value)}
                            className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white"
                            placeholder="e.g., https://linkedin.com/in/yourprofile"
                        />
                    </div>
                </div>

                <button
                    type="submit"
                    className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition-all duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
                    disabled={isSaving}
                >
                    {isSaving ? 'Saving Profile...' : 'Save Profile'}
                </button>
            </form>
            {message && (
                <p className={`mt-4 text-center ${message.includes('successfully') ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
                    {message}
                </p>
            )}
        </div>
    );
});

// LeagueLeaderboardCarousel Component
const LeagueLeaderboardCarousel = ({ allParticipants, currentUserId, currentSeason, previousSeasonEliminated }) => {
    const [activeLeagueIndex, setActiveLeagueIndex] = useState(0);

    const leagues = LEAGUE_LEVEL_THRESHOLDS.map(league => ({ name: league.name, color: league.color }));

    const filteredParticipants = allParticipants.filter(p => {
        const participantLeagueInfo = getLeagueInfo(p.level);
        return participantLeagueInfo.name === leagues[activeLeagueIndex].name;
    });

    // Sort filtered participants by XP for the specific league
    filteredParticipants.sort((a, b) => b.xp - a.xp);

    const handlePrev = () => {
        setActiveLeagueIndex((prevIndex) =>
            prevIndex === 0 ? leagues.length - 1 : prevIndex - 1
        );
    };

    const handleNext = () => {
        setActiveLeagueIndex((prevIndex) =>
            prevIndex === leagues.length - 1 ? 0 : prevIndex + 1
        );
    };

    return (
        <div className="bg-gray-100 dark:bg-gray-700 p-6 rounded-xl shadow-inner border border-gray-200 dark:border-gray-600 mt-8">
            <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 text-center">
                Leaderboard: {leagues[activeLeagueIndex].name}
            </h3>
            <div className="flex justify-between items-center mb-4">
                <button
                    onClick={handlePrev}
                    className="p-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition-colors duration-200"
                    aria-label="Previous League"
                >
                    <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24"><path d="M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6z"/></svg>
                </button>
                <span className="text-lg font-bold text-blue-600 dark:text-blue-400" style={{ color: leagues[activeLeagueIndex].color }}>
                    {leagues[activeLeagueIndex].name}
                </span>
                <button
                    onClick={handleNext}
                    className="p-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition-colors duration-200"
                    aria-label="Next League"
                >
                    <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24"><path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6z"/></svg>
                </button>
            </div>

            {filteredParticipants.length === 0 ? (
                <p className="text-gray-500 dark:text-gray-400 text-center">No participants in this league this season.</p>
            ) : (
                <ul className="space-y-2">
                    {filteredParticipants.map((participant, index) => (
                        <li
                            key={participant.id}
                            className={`p-2 rounded-lg flex justify-between items-center text-sm
                                ${participant.id === currentUserId
                                    ? 'bg-blue-200 dark:bg-blue-600 font-semibold text-blue-900 dark:text-white'
                                    : 'bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200'
                                }`}
                        >
                            <span className="flex items-center gap-2">
                                {index === 0 && (
                                    <svg className="w-5 h-5" fill={leagues[activeLeagueIndex].color} viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 11.35l-1.45-1.32C5.4 5.36 2 2.28 2 0.5 2 0.42 4.42-2 7.5-2c1.74 0 3.41.81 4.5 2.09C13.09-1.19 14.76-2 16.5-2 19.58-2 22 0.42 22 3.5c0 3.78-3.4 6.86-8.55 11.54L12 11.35z"/>
                                        <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"/>
                                    </svg>
                                )}
                                {index + 1}. {participant.name} {participant.id === currentUserId && '(You)'}
                            </span>
                            <span>XP: {participant.xp} | Level: {participant.level}</span>
                        </li>
                    ))}
                </ul>
            )}

            {/* Eliminated from Previous Season Section */}
            {previousSeasonEliminated.length > 0 && (
                <div className="mt-8 pt-4 border-t border-gray-300 dark:border-gray-600">
                    <h3 className="text-xl font-semibold text-red-600 dark:text-red-400 mb-4 text-center">
                        Eliminated from Season {currentSeason - 1}:
                    </h3>
                    <ul className="space-y-2">
                        {previousSeasonEliminated.map((eliminatedPlayer) => (
                            <li key={eliminatedPlayer.id} className="p-2 bg-red-50 dark:bg-red-900 text-red-800 dark:text-red-100 rounded-lg flex justify-between items-center text-sm">
                                <span>{eliminatedPlayer.name} (Level {eliminatedPlayer.level})</span>
                                <span>XP: {eliminatedPlayer.xp}</span>
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
};


// Tournament Component
const Tournament = ({ db, userId, onGainXP }) => {
    // Mock competitor data. In a real app, this would be fetched from Firestore/backend.
    const [competitors, setCompetitors] = useState([
        { id: 'user1', name: 'Bookworm_Alice', xp: 75, level: 2 },
        { id: 'user2', name: 'Reader_Bob', xp: 60, level: 2 },
        { id: 'user3', name: 'Lit_Charlie', xp: 45, level: 1 },
        { id: 'user4', name: 'PageTurner_Dave', xp: 90, level: 3 },
        { id: 'user5', name: 'StorySeeker_Eve', xp: 80, level: 2 },
        { id: 'user6', name: 'NovelNerd_Frank', xp: 30, level: 1 },
        { id: 'user7', name: 'ChapterChamp_Grace', xp: 100, level: 3 },
        { id: 'user8', name: 'VerseVoyager_Heidi', xp: 55, level: 2 },
        { id: 'user9', name: 'EpicExplorer_Ivan', xp: 70, level: 2 },
        { id: 'user10', name: 'MythMaster_Judy', xp: 20, level: 1 },
    ]);

    const [currentUserXP, setCurrentUserXP] = useState(0);
    const [currentUserLevel, setCurrentUserLevel] = useState(1);
    const [loading, setLoading] = useState(true);
    const [message, setMessage] = useState('');
    const [isSimulating, setIsSimulating] = useState(false);
    const [tournamentSeason, setTournamentSeason] = useState(1); // New state for tournament season
    const [previousSeasonEliminated, setPreviousSeasonEliminated] = useState([]); // New state for eliminated players

    // Function to calculate level based on XP (replicated from Profile for self-containment)
    const calculateLevel = (currentXP) => {
        let currentLevel = 1;
        let xpNeededForNext = 50;

        while (currentXP >= xpNeededForNext) {
            currentLevel++;
            xpNeededForNext += 20;
        }
        return { currentLevel, xpNeededForNext };
    };

    useEffect(() => {
        if (!db || !userId) return;

        const profileDocRef = doc(db, `artifacts/${appId}/users/${userId}/profile`, 'userProfile');
        // Corrected Firestore path for public data
        const tournamentSeasonDocRef = doc(db, `artifacts/${appId}/public/data/tournamentSeason`, 'seasonInfo');

        // Listen for current user's profile changes
        const unsubscribeProfile = onSnapshot(profileDocRef, (docSnap) => {
            if (docSnap.exists()) {
                const data = docSnap.data();
                setCurrentUserXP(data.xp || 0);
                setCurrentUserLevel(data.level || 1);
            } else {
                setCurrentUserXP(0);
                setCurrentUserLevel(1);
            }
            setLoading(false);
        }, (error) => {
            console.error("Error fetching user profile for tournament:", error);
            setMessage('Failed to load your tournament data.');
            setLoading(false);
        });

        // Listen for tournament season changes
        const unsubscribeSeason = onSnapshot(tournamentSeasonDocRef, async (docSnap) => {
            let currentSeasonVal = 1;
            if (docSnap.exists()) {
                currentSeasonVal = docSnap.data().season || 1;
            } else {
                // Initialize season if it doesn't exist
                await setDoc(tournamentSeasonDocRef, { season: 1 }).catch(e => console.error("Error initializing tournament season:", e));
            }
            setTournamentSeason(currentSeasonVal);

            // Fetch previous season's eliminated players
            if (currentSeasonVal > 1) {
                const prevSeasonDocRef = doc(db, `artifacts/${appId}/public/data/tournamentHistory`, String(currentSeasonVal - 1));
                const prevSeasonSnap = await getDoc(prevSeasonDocRef);
                if (prevSeasonSnap.exists()) {
                    const prevSeasonData = prevSeasonSnap.data();
                    const eliminated = prevSeasonData.participants.filter(p => p.tournamentStatus === 'eliminated');
                    setPreviousSeasonEliminated(eliminated);
                } else {
                    setPreviousSeasonEliminated([]);
                }
            } else {
                setPreviousSeasonEliminated([]);
            }
        }, (error) => {
            console.error("Error fetching tournament season or history:", error);
        });


        return () => {
            unsubscribeProfile();
            unsubscribeSeason();
        };
    }, [db, userId]);

    const handleSimulateWeeklyReset = async () => {
        setIsSimulating(true);
        setMessage('Simulating weekly reset and tournament results...');

        // Corrected Firestore path for public data
        const tournamentSeasonDocRef = doc(db, `artifacts/${appId}/public/data/tournamentSeason`, 'seasonInfo');
        let currentSeason = tournamentSeason;

        try {
            const seasonDocSnap = await getDoc(tournamentSeasonDocRef);
            if (seasonDocSnap.exists()) {
                currentSeason = seasonDocSnap.data().season || 1;
            } else {
                await setDoc(tournamentSeasonDocRef, { season: 1 });
                currentSeason = 1;
            }
        } catch (error) {
            console.error("Error fetching/initializing tournament season:", error);
            setMessage('Error getting tournament season. Please try again.');
            setIsSimulating(false);
            return;
        }

        // Determine number of promoted participants based on season
        // Season 1: 10, Season 2: 9, Season 3: 8, etc., minimum 5
        const numPromoted = Math.max(10 - (currentSeason - 1), 5);

        // 1. Combine all participants (mocked + current user) and sort by XP
        const allParticipantsBeforeReset = [
            ...competitors,
            { id: userId, name: `You (${userId.substring(0, 8)})`, xp: currentUserXP, level: currentUserLevel }
        ];
        allParticipantsBeforeReset.sort((a, b) => b.xp - a.xp); // Sort by XP descending

        const topPromotedParticipants = allParticipantsBeforeReset.slice(0, numPromoted);

        // Prepare results for historical storage
        const tournamentResultsForHistory = allParticipantsBeforeReset.map(p => {
            const isPromoted = topPromotedParticipants.some(promotedP => promotedP.id === p.id);
            return {
                ...p,
                tournamentStatus: isPromoted ? 'promoted' : 'eliminated'
            };
        });

        // Save current season's results to history
        const tournamentHistoryDocRef = doc(db, `artifacts/${appId}/public/data/tournamentHistory`, String(currentSeason));
        try {
            await setDoc(tournamentHistoryDocRef, {
                season: currentSeason,
                participants: tournamentResultsForHistory,
                resetAt: new Date().toISOString()
            });
        } catch (error) {
            console.error("Error saving tournament history:", error);
            setMessage('Error saving tournament history. Please try again.');
            setIsSimulating(false);
            return;
        }

        // 2. Update levels and reset XP for all competitors (simulated)
        const updatedCompetitors = competitors.map(comp => {
            let newLevel = comp.level;
            // Check if this simulated competitor is in the top promoted list
            const inTopPromoted = topPromotedParticipants.some(p => p.id === comp.id);
            if (inTopPromoted) {
                newLevel++; // Advance level for top promoted
            }
            return { ...comp, xp: 0, level: newLevel }; // Reset XP for everyone
        });
        setCompetitors(updatedCompetitors);

        // 3. Update current user's XP and level in Firestore
        if (db && userId) {
            const profileDocRef = doc(db, `artifacts/${appId}/users/${userId}/profile`, 'userProfile');
            try {
                // Ensure the userProfile document exists before attempting to update it
                const userProfileSnap = await getDoc(profileDocRef);
                if (!userProfileSnap.exists()) {
                    // Initialize with default values if it doesn't exist
                    await setDoc(profileDocRef, {
                        bio: '',
                        socialMediaLinks: { facebook: '', twitter: '', linkedin: '' },
                        profilePicUrl: 'https://placehold.co/150x150/aabbcc/ffffff?text=Profile',
                        xp: 0,
                        level: 1,
                        claimedEventXP: {},
                        createdAt: new Date().toISOString()
                    });
                }

                // Find current user's rank and calculate bonus XP
                const currentUserRank = topPromotedParticipants.findIndex(p => p.id === userId) + 1; // +1 because index is 0-based
                let bonusXP = 0;
                let newCurrentUserLevel = currentUserLevel;

                if (currentUserRank > 0) { // If current user is in the promoted ranks
                    bonusXP = calculateBonusXP(currentUserRank);
                    newCurrentUserLevel++; // User also advances a level
                }

                await updateDoc(profileDocRef, {
                    xp: bonusXP, // Start new week with bonus XP if any, otherwise 0
                    level: newCurrentUserLevel,
                    claimedEventXP: {}, // Reset claimed event XP for the new week
                });
                setCurrentUserXP(bonusXP);
                setCurrentUserLevel(newCurrentUserLevel);

                setMessage(`Weekly reset simulated! XP reset to 0 (plus ${bonusXP} bonus XP if promoted). Levels updated for top ${numPromoted}.`);
            } catch (error) {
                console.error("Error resetting user XP:", error);
                setMessage('Error resetting your XP. Please try again.');
            }
        }

        // 4. Increment tournament season in Firestore
        const nextSeason = currentSeason + 1;
        try {
            await updateDoc(tournamentSeasonDocRef, { season: nextSeason });
            setTournamentSeason(nextSeason);
        } catch (error) {
            console.error("Error updating tournament season:", error);
            setMessage('Error updating tournament season. Please try again.');
        }

        setTimeout(() => {
            setMessage('');
            setIsSimulating(false);
        }, 3000);
    };

    if (loading) {
        return <div className="text-center py-8 text-gray-600 dark:text-gray-400">Loading tournament data...</div>;
    }

    const allParticipants = [
        ...competitors,
        { id: userId, name: `You (${userId.substring(0, 8)})`, xp: currentUserXP, level: currentUserLevel }
    ];

    allParticipants.sort((a, b) => b.xp - a.xp); // Sort by XP descending

    // Determine number of promoted participants for current season display
    const numPromotedForDisplay = Math.max(10 - (tournamentSeason - 1), 5);


    return (
        <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 max-w-2xl mx-auto mt-8">
            <div className="flex flex-col items-center mb-6">
                <svg className="w-24 h-24 text-yellow-500 mb-4 animate-bounce" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="M19 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h4l3 3 3-3h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-5.12 10.88L12 17.17l-1.88-4.29-4.29-1.88 4.29-1.88 1.88-4.29 1.88 4.29 4.29 1.88-4.29 1.88z"/>
                </svg>
                <h2 className="text-3xl font-bold text-blue-600 dark:text-blue-400 text-center">Weekly Reading Tournament</h2>
                <p className="text-md text-gray-700 dark:text-gray-300 mt-2">
                    Season: <span className="font-bold text-blue-500">{tournamentSeason}</span>
                </p>
            </div>
            <p className="text-gray-700 dark:text-gray-300 mb-4 text-center">
                Compete with other readers! Top <span className="font-bold">{numPromotedForDisplay}</span> XP collectors advance a level each week.
            </p>

            <div className="mb-6 bg-gray-100 dark:bg-gray-700 p-4 rounded-lg shadow-inner border border-gray-200 dark:border-gray-600">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">How to Earn XP:</h3>
                <ul className="list-disc list-inside text-sm text-gray-700 dark:text-gray-300">
                    <li>Post a reply in Community: 5 XP</li>
                    <li>Add a book review: 15 XP</li>
                    <li>Host an event: 20 XP (claimable once per event)</li>
                </ul>
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white mt-4 mb-2">Bonus XP for Top Finishers:</h3>
                <ul className="list-disc list-inside text-sm text-gray-700 dark:text-gray-300">
                    <li>1st Place: 25 XP</li>
                    <li>2nd Place: 23 XP</li>
                    <li>3rd Place: 21 XP</li>
                    <li>...and so on (decreasing by 2 XP per position)</li>
                </ul>
            </div>

            {/* Removed the overall leaderboard section */}

            <LeagueLeaderboardCarousel
                allParticipants={allParticipants}
                currentUserId={userId}
                currentSeason={tournamentSeason}
                previousSeasonEliminated={previousSeasonEliminated}
            />

            <div className="mt-6 text-center">
                <p className="text-xs text-gray-500 dark:text-gray-400 mb-3">
                    (Note: Other competitors' data is simulated. Your XP and level are saved to Firestore.)
                </p>
                <button
                    onClick={handleSimulateWeeklyReset}
                    className="px-6 py-3 bg-yellow-500 hover:bg-yellow-600 text-white font-bold rounded-lg shadow-md transition-all duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
                    disabled={isSimulating}
                >
                    {isSimulating ? 'Simulating Reset...' : 'Simulate Weekly Reset'}
                </button>
                {message && (
                    <p className={`mt-3 text-sm ${message.includes('success') ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
                        {message}
                    </p>
                )}
            </div>
        </div>
    );
};


// Main App Component
const App = () => {
    // State to manage the current view/tab, defaulting to 'community'
    const [currentView, setCurrentView] = useState('community'); // 'my-reads', 'community', 'events', 'book-groups', 'profile', 'tournament'
    // State for Firebase instances and user ID
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [loading, setLoading] = useState(true);
    const [errorMessage, setErrorMessage] = useState('');
    const profileRef = useRef(null); // Ref to access Profile component's methods

    // States for data needed across components
    const [currentUserFollowing, setCurrentUserFollowing] = useState([]);
    const [currentUserReadingBooks, setCurrentUserReadingBooks] = useState([]);

    // Function to gain XP, passed down to children components
    const handleGainXP = async (xpToGain, eventId = null) => {
        if (profileRef.current && profileRef.current.handleGainXP) {
            await profileRef.current.handleGainXP(xpToGain, eventId);
        }
    };

    // Helper to format view names for display
    const formatViewName = (view) => {
        switch (view) {
            case 'my-reads':
                return 'My Reads';
            case 'community':
                return 'Community Hub';
            case 'events':
                return 'Events';
            case 'book-groups':
                return 'Book Groups';
            case 'profile':
                return 'My Profile';
            case 'tournament':
                return 'Tournament';
            default:
                return '';
        }
    };

    // Initialize Firebase and handle authentication
    useEffect(() => {
        try {
            const app = initializeApp(firebaseConfig);
            const firestore = getFirestore(app);
            const authentication = getAuth(app);

            setDb(firestore);
            setAuth(authentication);

            // Listen for authentication state changes
            const unsubscribeAuth = onAuthStateChanged(authentication, async (user) => {
                if (user) {
                    setUserId(user.uid);
                    setIsAuthenticated(true);
                    setLoading(false);

                    // Setup listener for user's profile (for following list)
                    const profileDocRef = doc(firestore, `artifacts/${appId}/users/${user.uid}/profile`, 'userProfile');
                    const unsubscribeProfile = onSnapshot(profileDocRef, (docSnap) => {
                        if (docSnap.exists()) {
                            const data = docSnap.data();
                            setCurrentUserFollowing(data.following || []);
                        } else {
                            // If profile doesn't exist, initialize it (should be handled by Profile component, but good fallback)
                            setCurrentUserFollowing([]);
                        }
                    }, (error) => console.error("Error fetching user following:", error));

                    // Setup listener for user's reading books
                    const booksCollectionRef = collection(firestore, `artifacts/${appId}/users/${user.uid}/books`);
                    const unsubscribeBooks = onSnapshot(booksCollectionRef, (snapshot) => {
                        const reading = [];
                        snapshot.forEach((doc) => {
                            const book = doc.data();
                            if (book.status === 'reading') {
                                reading.push(book);
                            }
                        });
                        setCurrentUserReadingBooks(reading);
                    }, (error) => console.error("Error fetching user reading books:", error));

                    return () => {
                        unsubscribeProfile();
                        unsubscribeBooks();
                    };

                } else {
                    // Sign in anonymously if no custom token is provided or already signed out
                    try {
                        if (initialAuthToken) {
                            await signInWithCustomToken(authentication, initialAuthToken);
                        } else {
                            await signInAnonymously(authentication);
                        }
                    } catch (error) {
                        console.error("Error signing in:", error);
                        setErrorMessage("Failed to authenticate. Please try again.");
                        setLoading(false);
                    }
                }
            });

            // Clean up the main auth listener on component unmount
            return () => unsubscribeAuth();
        } catch (error) {
            console.error("Error initializing Firebase:", error);
            setErrorMessage("Failed to initialize the app. Please check your Firebase configuration.");
            setLoading(false);
        }
    }, []); // Run only once on component mount

    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-white">
                <p className="text-xl">Loading application...</p>
            </div>
        );
    }

    if (errorMessage) {
        return (
            <div className="flex flex-col items-center justify-center min-h-screen bg-red-100 text-red-800 p-4">
                <p className="text-xl font-bold">Error:</p>
                <p className="text-lg text-center">{errorMessage}</p>
                <p className="mt-4">Please refresh the page or contact support if the issue persists.</p>
            </div>
        );
    }

    if (!isAuthenticated || !db || !auth || !userId) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-white">
                <p className="text-xl">Authenticating...</p>
            </div>
        );
    }

    return (
        <div className="min-h-screen flex flex-col bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-white font-inter">
            {/* Header */}
            <header className="bg-gradient-to-r from-sky-600 to-blue-700 p-4 shadow-md rounded-b-lg">
                <h1 className="text-3xl font-bold text-white text-center">Beyond Pages</h1>
                {userId && (
                    <p className="text-xs text-blue-200 text-center mt-2">
                        User ID: {userId}
                    </p>
                )}
            </header>

            {/* Main Content Area */}
            <main className="flex-grow p-4 pb-16"> {/* Add padding-bottom to account for fixed bottom nav */}
                <h2 className="text-3xl font-bold text-blue-800 dark:text-blue-200 text-center mb-6">
                    {formatViewName(currentView)}
                </h2>

                {currentView === 'my-reads' && <BookList db={db} userId={userId} onGainXP={handleGainXP} />}
                {currentView === 'community' && <Community db={db} userId={userId} onGainXP={handleGainXP} currentUserFollowing={currentUserFollowing} setCurrentUserFollowing={setCurrentUserFollowing} currentUserReadingBooks={currentUserReadingBooks} />}
                {currentView === 'events' && <EventsList userId={userId} onGainXP={handleGainXP} />}
                {currentView === 'book-groups' && <BookGroupsList userId={userId} />}
                {currentView === 'profile' && <Profile db={db} userId={userId} ref={profileRef} setCurrentUserFollowing={setCurrentUserFollowing} />} {/* Pass setCurrentUserFollowing to Profile */}
                {currentView === 'tournament' && <Tournament db={db} userId={userId} onGainXP={handleGainXP} />}
            </main>

            {/* Navigation - Fixed at the bottom */}
            <nav className="fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 shadow-lg p-3 flex justify-around rounded-t-lg">
                <NavButton
                    label="Community"
                    view="community"
                    currentView={currentView}
                    setCurrentView={setCurrentView}
                    icon={
                        <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.94 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z"/>
                        </svg>
                    }
                />
                <NavButton
                    label="My Reads"
                    view="my-reads"
                    currentView={currentView}
                    setCurrentView={setCurrentView}
                    icon={
                        <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M4 19V3h14v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2zm2 0h12V5H6v14zm4-12h4v2h-4zm0 4h4v2h-4z"/>
                            <path d="M18 19V3h2v16a2 2 0 0 1-2 2z"/>
                        </svg>
                    }
                />
                <NavButton
                    label="Events"
                    view="events"
                    currentView={currentView}
                    setCurrentView={setCurrentView}
                    icon={
                        <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M19 4h-2V3c0-.55-.45-1-1-1s-1 .45-1 1v1H8V3c0-.55-.45-1-1-1s-1 .45-1 1v1H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11zM5 7V6h14v1H5zM12 11h5v5h-5z"/>
                        </svg>
                    }
                />
                <NavButton
                    label="Groups"
                    view="book-groups"
                    currentView={currentView}
                    setCurrentView={setCurrentView}
                    icon={
                        <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M18 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12-8H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h12v16H6V4z"/>
                        </svg>
                    }
                />
                <NavButton
                    label="Tournament"
                    view="tournament"
                    currentView={currentView}
                    setCurrentView={setCurrentView}
                    icon={
                        <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2c-2.76 0-5 2.24-5 5v3H2v7h5v5h10v-5h5v-7h-5V7c0-2.76-2.24-5-5-5zm0 2c1.66 0 3 1.34 3 3v3H9V7c0-1.66 1.34-3 3-3zm-2 15v-5h4v5h-4z"/>
                        </svg>
                    }
                />
                <NavButton
                    label="Profile"
                    view="profile"
                    currentView={currentView}
                    setCurrentView={setCurrentView}
                    icon={
                        <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                        </svg>
                    }
                />
            </nav>
        </div>
    );
};

export default App;
